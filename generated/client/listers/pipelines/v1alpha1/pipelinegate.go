/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pluralsh/deployment-operator/apis/pipelines/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PipelineGateLister helps list PipelineGates.
// All objects returned here must be treated as read-only.
type PipelineGateLister interface {
	// List lists all PipelineGates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineGate, err error)
	// PipelineGates returns an object that can list and get PipelineGates.
	PipelineGates(namespace string) PipelineGateNamespaceLister
	PipelineGateListerExpansion
}

// pipelineGateLister implements the PipelineGateLister interface.
type pipelineGateLister struct {
	indexer cache.Indexer
}

// NewPipelineGateLister returns a new PipelineGateLister.
func NewPipelineGateLister(indexer cache.Indexer) PipelineGateLister {
	return &pipelineGateLister{indexer: indexer}
}

// List lists all PipelineGates in the indexer.
func (s *pipelineGateLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineGate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineGate))
	})
	return ret, err
}

// PipelineGates returns an object that can list and get PipelineGates.
func (s *pipelineGateLister) PipelineGates(namespace string) PipelineGateNamespaceLister {
	return pipelineGateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PipelineGateNamespaceLister helps list and get PipelineGates.
// All objects returned here must be treated as read-only.
type PipelineGateNamespaceLister interface {
	// List lists all PipelineGates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineGate, err error)
	// Get retrieves the PipelineGate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PipelineGate, error)
	PipelineGateNamespaceListerExpansion
}

// pipelineGateNamespaceLister implements the PipelineGateNamespaceLister
// interface.
type pipelineGateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PipelineGates in the indexer for a given namespace.
func (s pipelineGateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineGate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineGate))
	})
	return ret, err
}

// Get retrieves the PipelineGate from the indexer for a given namespace and name.
func (s pipelineGateNamespaceLister) Get(name string) (*v1alpha1.PipelineGate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pipelinegate"), name)
	}
	return obj.(*v1alpha1.PipelineGate), nil
}
