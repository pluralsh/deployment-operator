// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// NodeMetricsInterfaceMock is an autogenerated mock type for the NodeMetricsInterface type
type NodeMetricsInterfaceMock struct {
	mock.Mock
}

type NodeMetricsInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeMetricsInterfaceMock) EXPECT() *NodeMetricsInterfaceMock_Expecter {
	return &NodeMetricsInterfaceMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *NodeMetricsInterfaceMock) Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta1.NodeMetrics, error) {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1beta1.NodeMetrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) (*v1beta1.NodeMetrics, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) *v1beta1.NodeMetrics); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.NodeMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeMetricsInterfaceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type NodeMetricsInterfaceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v1.GetOptions
func (_e *NodeMetricsInterfaceMock_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *NodeMetricsInterfaceMock_Get_Call {
	return &NodeMetricsInterfaceMock_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *NodeMetricsInterfaceMock_Get_Call) Run(run func(ctx context.Context, name string, opts v1.GetOptions)) *NodeMetricsInterfaceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(v1.GetOptions))
	})
	return _c
}

func (_c *NodeMetricsInterfaceMock_Get_Call) Return(_a0 *v1beta1.NodeMetrics, _a1 error) *NodeMetricsInterfaceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeMetricsInterfaceMock_Get_Call) RunAndReturn(run func(context.Context, string, v1.GetOptions) (*v1beta1.NodeMetrics, error)) *NodeMetricsInterfaceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *NodeMetricsInterfaceMock) List(ctx context.Context, opts v1.ListOptions) (*v1beta1.NodeMetricsList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1beta1.NodeMetricsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*v1beta1.NodeMetricsList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *v1beta1.NodeMetricsList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.NodeMetricsList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeMetricsInterfaceMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NodeMetricsInterfaceMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *NodeMetricsInterfaceMock_Expecter) List(ctx interface{}, opts interface{}) *NodeMetricsInterfaceMock_List_Call {
	return &NodeMetricsInterfaceMock_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *NodeMetricsInterfaceMock_List_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *NodeMetricsInterfaceMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.ListOptions))
	})
	return _c
}

func (_c *NodeMetricsInterfaceMock_List_Call) Return(_a0 *v1beta1.NodeMetricsList, _a1 error) *NodeMetricsInterfaceMock_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeMetricsInterfaceMock_List_Call) RunAndReturn(run func(context.Context, v1.ListOptions) (*v1beta1.NodeMetricsList, error)) *NodeMetricsInterfaceMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *NodeMetricsInterfaceMock) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeMetricsInterfaceMock_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type NodeMetricsInterfaceMock_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *NodeMetricsInterfaceMock_Expecter) Watch(ctx interface{}, opts interface{}) *NodeMetricsInterfaceMock_Watch_Call {
	return &NodeMetricsInterfaceMock_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *NodeMetricsInterfaceMock_Watch_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *NodeMetricsInterfaceMock_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.ListOptions))
	})
	return _c
}

func (_c *NodeMetricsInterfaceMock_Watch_Call) Return(_a0 watch.Interface, _a1 error) *NodeMetricsInterfaceMock_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeMetricsInterfaceMock_Watch_Call) RunAndReturn(run func(context.Context, v1.ListOptions) (watch.Interface, error)) *NodeMetricsInterfaceMock_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeMetricsInterfaceMock creates a new instance of NodeMetricsInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeMetricsInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeMetricsInterfaceMock {
	mock := &NodeMetricsInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
