// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/pluralsh/deployment-operator/pkg/client"

	goclient "github.com/pluralsh/console/go/client"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/pluralsh/deployment-operator/pkg/harness/stackrun/v1"

	v1alpha1 "github.com/pluralsh/deployment-operator/api/v1alpha1"
)

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// AddStackRunLogs provides a mock function with given fields: id, logs
func (_m *ClientMock) AddStackRunLogs(id string, logs string) error {
	ret := _m.Called(id, logs)

	if len(ret) == 0 {
		panic("no return value specified for AddStackRunLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_AddStackRunLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStackRunLogs'
type ClientMock_AddStackRunLogs_Call struct {
	*mock.Call
}

// AddStackRunLogs is a helper method to define mock.On call
//   - id string
//   - logs string
func (_e *ClientMock_Expecter) AddStackRunLogs(id interface{}, logs interface{}) *ClientMock_AddStackRunLogs_Call {
	return &ClientMock_AddStackRunLogs_Call{Call: _e.mock.On("AddStackRunLogs", id, logs)}
}

func (_c *ClientMock_AddStackRunLogs_Call) Run(run func(id string, logs string)) *ClientMock_AddStackRunLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_AddStackRunLogs_Call) Return(_a0 error) *ClientMock_AddStackRunLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_AddStackRunLogs_Call) RunAndReturn(run func(string, string) error) *ClientMock_AddStackRunLogs_Call {
	_c.Call.Return(run)
	return _c
}

// CancelAgentRun provides a mock function with given fields: ctx, id
func (_m *ClientMock) CancelAgentRun(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CancelAgentRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_CancelAgentRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelAgentRun'
type ClientMock_CancelAgentRun_Call struct {
	*mock.Call
}

// CancelAgentRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientMock_Expecter) CancelAgentRun(ctx interface{}, id interface{}) *ClientMock_CancelAgentRun_Call {
	return &ClientMock_CancelAgentRun_Call{Call: _e.mock.On("CancelAgentRun", ctx, id)}
}

func (_c *ClientMock_CancelAgentRun_Call) Run(run func(ctx context.Context, id string)) *ClientMock_CancelAgentRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_CancelAgentRun_Call) Return(_a0 error) *ClientMock_CancelAgentRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_CancelAgentRun_Call) RunAndReturn(run func(context.Context, string) error) *ClientMock_CancelAgentRun_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteStackRun provides a mock function with given fields: id, attributes
func (_m *ClientMock) CompleteStackRun(id string, attributes goclient.StackRunAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CompleteStackRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, goclient.StackRunAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_CompleteStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteStackRun'
type ClientMock_CompleteStackRun_Call struct {
	*mock.Call
}

// CompleteStackRun is a helper method to define mock.On call
//   - id string
//   - attributes goclient.StackRunAttributes
func (_e *ClientMock_Expecter) CompleteStackRun(id interface{}, attributes interface{}) *ClientMock_CompleteStackRun_Call {
	return &ClientMock_CompleteStackRun_Call{Call: _e.mock.On("CompleteStackRun", id, attributes)}
}

func (_c *ClientMock_CompleteStackRun_Call) Run(run func(id string, attributes goclient.StackRunAttributes)) *ClientMock_CompleteStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(goclient.StackRunAttributes))
	})
	return _c
}

func (_c *ClientMock_CompleteStackRun_Call) Return(_a0 error) *ClientMock_CompleteStackRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_CompleteStackRun_Call) RunAndReturn(run func(string, goclient.StackRunAttributes) error) *ClientMock_CompleteStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAgentPullRequest provides a mock function with given fields: ctx, runID, attrs
func (_m *ClientMock) CreateAgentPullRequest(ctx context.Context, runID string, attrs goclient.AgentPullRequestAttributes) (*goclient.PullRequestFragment, error) {
	ret := _m.Called(ctx, runID, attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgentPullRequest")
	}

	var r0 *goclient.PullRequestFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentPullRequestAttributes) (*goclient.PullRequestFragment, error)); ok {
		return rf(ctx, runID, attrs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentPullRequestAttributes) *goclient.PullRequestFragment); ok {
		r0 = rf(ctx, runID, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.PullRequestFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, goclient.AgentPullRequestAttributes) error); ok {
		r1 = rf(ctx, runID, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_CreateAgentPullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAgentPullRequest'
type ClientMock_CreateAgentPullRequest_Call struct {
	*mock.Call
}

// CreateAgentPullRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - runID string
//   - attrs goclient.AgentPullRequestAttributes
func (_e *ClientMock_Expecter) CreateAgentPullRequest(ctx interface{}, runID interface{}, attrs interface{}) *ClientMock_CreateAgentPullRequest_Call {
	return &ClientMock_CreateAgentPullRequest_Call{Call: _e.mock.On("CreateAgentPullRequest", ctx, runID, attrs)}
}

func (_c *ClientMock_CreateAgentPullRequest_Call) Run(run func(ctx context.Context, runID string, attrs goclient.AgentPullRequestAttributes)) *ClientMock_CreateAgentPullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(goclient.AgentPullRequestAttributes))
	})
	return _c
}

func (_c *ClientMock_CreateAgentPullRequest_Call) Return(_a0 *goclient.PullRequestFragment, _a1 error) *ClientMock_CreateAgentPullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_CreateAgentPullRequest_Call) RunAndReturn(run func(context.Context, string, goclient.AgentPullRequestAttributes) (*goclient.PullRequestFragment, error)) *ClientMock_CreateAgentPullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAgentRun provides a mock function with given fields: ctx, runtimeID, attrs
func (_m *ClientMock) CreateAgentRun(ctx context.Context, runtimeID string, attrs goclient.AgentRunAttributes) (*goclient.AgentRunFragment, error) {
	ret := _m.Called(ctx, runtimeID, attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgentRun")
	}

	var r0 *goclient.AgentRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentRunAttributes) (*goclient.AgentRunFragment, error)); ok {
		return rf(ctx, runtimeID, attrs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentRunAttributes) *goclient.AgentRunFragment); ok {
		r0 = rf(ctx, runtimeID, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.AgentRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, goclient.AgentRunAttributes) error); ok {
		r1 = rf(ctx, runtimeID, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_CreateAgentRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAgentRun'
type ClientMock_CreateAgentRun_Call struct {
	*mock.Call
}

// CreateAgentRun is a helper method to define mock.On call
//   - ctx context.Context
//   - runtimeID string
//   - attrs goclient.AgentRunAttributes
func (_e *ClientMock_Expecter) CreateAgentRun(ctx interface{}, runtimeID interface{}, attrs interface{}) *ClientMock_CreateAgentRun_Call {
	return &ClientMock_CreateAgentRun_Call{Call: _e.mock.On("CreateAgentRun", ctx, runtimeID, attrs)}
}

func (_c *ClientMock_CreateAgentRun_Call) Run(run func(ctx context.Context, runtimeID string, attrs goclient.AgentRunAttributes)) *ClientMock_CreateAgentRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(goclient.AgentRunAttributes))
	})
	return _c
}

func (_c *ClientMock_CreateAgentRun_Call) Return(_a0 *goclient.AgentRunFragment, _a1 error) *ClientMock_CreateAgentRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_CreateAgentRun_Call) RunAndReturn(run func(context.Context, string, goclient.AgentRunAttributes) (*goclient.AgentRunFragment, error)) *ClientMock_CreateAgentRun_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAgentRuntime provides a mock function with given fields: ctx, id
func (_m *ClientMock) DeleteAgentRuntime(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgentRuntime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DeleteAgentRuntime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAgentRuntime'
type ClientMock_DeleteAgentRuntime_Call struct {
	*mock.Call
}

// DeleteAgentRuntime is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientMock_Expecter) DeleteAgentRuntime(ctx interface{}, id interface{}) *ClientMock_DeleteAgentRuntime_Call {
	return &ClientMock_DeleteAgentRuntime_Call{Call: _e.mock.On("DeleteAgentRuntime", ctx, id)}
}

func (_c *ClientMock_DeleteAgentRuntime_Call) Run(run func(ctx context.Context, id string)) *ClientMock_DeleteAgentRuntime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_DeleteAgentRuntime_Call) Return(_a0 error) *ClientMock_DeleteAgentRuntime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DeleteAgentRuntime_Call) RunAndReturn(run func(context.Context, string) error) *ClientMock_DeleteAgentRuntime_Call {
	_c.Call.Return(run)
	return _c
}

// DetachCluster provides a mock function with given fields: id
func (_m *ClientMock) DetachCluster(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DetachCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DetachCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachCluster'
type ClientMock_DetachCluster_Call struct {
	*mock.Call
}

// DetachCluster is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) DetachCluster(id interface{}) *ClientMock_DetachCluster_Call {
	return &ClientMock_DetachCluster_Call{Call: _e.mock.On("DetachCluster", id)}
}

func (_c *ClientMock_DetachCluster_Call) Run(run func(id string)) *ClientMock_DetachCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_DetachCluster_Call) Return(_a0 error) *ClientMock_DetachCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DetachCluster_Call) RunAndReturn(run func(string) error) *ClientMock_DetachCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GateExists provides a mock function with given fields: id
func (_m *ClientMock) GateExists(id string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GateExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ClientMock_GateExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GateExists'
type ClientMock_GateExists_Call struct {
	*mock.Call
}

// GateExists is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GateExists(id interface{}) *ClientMock_GateExists_Call {
	return &ClientMock_GateExists_Call{Call: _e.mock.On("GateExists", id)}
}

func (_c *ClientMock_GateExists_Call) Run(run func(id string)) *ClientMock_GateExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GateExists_Call) Return(_a0 bool) *ClientMock_GateExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_GateExists_Call) RunAndReturn(run func(string) bool) *ClientMock_GateExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentRun provides a mock function with given fields: ctx, id
func (_m *ClientMock) GetAgentRun(ctx context.Context, id string) (*goclient.AgentRunFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentRun")
	}

	var r0 *goclient.AgentRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*goclient.AgentRunFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *goclient.AgentRunFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.AgentRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetAgentRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentRun'
type ClientMock_GetAgentRun_Call struct {
	*mock.Call
}

// GetAgentRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientMock_Expecter) GetAgentRun(ctx interface{}, id interface{}) *ClientMock_GetAgentRun_Call {
	return &ClientMock_GetAgentRun_Call{Call: _e.mock.On("GetAgentRun", ctx, id)}
}

func (_c *ClientMock_GetAgentRun_Call) Run(run func(ctx context.Context, id string)) *ClientMock_GetAgentRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_GetAgentRun_Call) Return(_a0 *goclient.AgentRunFragment, _a1 error) *ClientMock_GetAgentRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetAgentRun_Call) RunAndReturn(run func(context.Context, string) (*goclient.AgentRunFragment, error)) *ClientMock_GetAgentRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentRuntime provides a mock function with given fields: ctx, id
func (_m *ClientMock) GetAgentRuntime(ctx context.Context, id string) (*goclient.AgentRuntimeFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentRuntime")
	}

	var r0 *goclient.AgentRuntimeFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*goclient.AgentRuntimeFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *goclient.AgentRuntimeFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.AgentRuntimeFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetAgentRuntime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentRuntime'
type ClientMock_GetAgentRuntime_Call struct {
	*mock.Call
}

// GetAgentRuntime is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientMock_Expecter) GetAgentRuntime(ctx interface{}, id interface{}) *ClientMock_GetAgentRuntime_Call {
	return &ClientMock_GetAgentRuntime_Call{Call: _e.mock.On("GetAgentRuntime", ctx, id)}
}

func (_c *ClientMock_GetAgentRuntime_Call) Run(run func(ctx context.Context, id string)) *ClientMock_GetAgentRuntime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_GetAgentRuntime_Call) Return(_a0 *goclient.AgentRuntimeFragment, _a1 error) *ClientMock_GetAgentRuntime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetAgentRuntime_Call) RunAndReturn(run func(context.Context, string) (*goclient.AgentRuntimeFragment, error)) *ClientMock_GetAgentRuntime_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: id
func (_m *ClientMock) GetCluster(id string) (*goclient.TinyClusterFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *goclient.TinyClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.TinyClusterFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.TinyClusterFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.TinyClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type ClientMock_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetCluster(id interface{}) *ClientMock_GetCluster_Call {
	return &ClientMock_GetCluster_Call{Call: _e.mock.On("GetCluster", id)}
}

func (_c *ClientMock_GetCluster_Call) Run(run func(id string)) *ClientMock_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetCluster_Call) Return(_a0 *goclient.TinyClusterFragment, _a1 error) *ClientMock_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetCluster_Call) RunAndReturn(run func(string) (*goclient.TinyClusterFragment, error)) *ClientMock_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackup provides a mock function with given fields: clusterID, namespace, name
func (_m *ClientMock) GetClusterBackup(clusterID string, namespace string, name string) (*goclient.ClusterBackupFragment, error) {
	ret := _m.Called(clusterID, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackup")
	}

	var r0 *goclient.ClusterBackupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*goclient.ClusterBackupFragment, error)); ok {
		return rf(clusterID, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *goclient.ClusterBackupFragment); ok {
		r0 = rf(clusterID, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ClusterBackupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(clusterID, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackup'
type ClientMock_GetClusterBackup_Call struct {
	*mock.Call
}

// GetClusterBackup is a helper method to define mock.On call
//   - clusterID string
//   - namespace string
//   - name string
func (_e *ClientMock_Expecter) GetClusterBackup(clusterID interface{}, namespace interface{}, name interface{}) *ClientMock_GetClusterBackup_Call {
	return &ClientMock_GetClusterBackup_Call{Call: _e.mock.On("GetClusterBackup", clusterID, namespace, name)}
}

func (_c *ClientMock_GetClusterBackup_Call) Run(run func(clusterID string, namespace string, name string)) *ClientMock_GetClusterBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClientMock_GetClusterBackup_Call) Return(_a0 *goclient.ClusterBackupFragment, _a1 error) *ClientMock_GetClusterBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterBackup_Call) RunAndReturn(run func(string, string, string) (*goclient.ClusterBackupFragment, error)) *ClientMock_GetClusterBackup_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterGate provides a mock function with given fields: id
func (_m *ClientMock) GetClusterGate(id string) (*goclient.PipelineGateFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterGate")
	}

	var r0 *goclient.PipelineGateFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.PipelineGateFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.PipelineGateFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.PipelineGateFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterGate'
type ClientMock_GetClusterGate_Call struct {
	*mock.Call
}

// GetClusterGate is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetClusterGate(id interface{}) *ClientMock_GetClusterGate_Call {
	return &ClientMock_GetClusterGate_Call{Call: _e.mock.On("GetClusterGate", id)}
}

func (_c *ClientMock_GetClusterGate_Call) Run(run func(id string)) *ClientMock_GetClusterGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetClusterGate_Call) Return(_a0 *goclient.PipelineGateFragment, _a1 error) *ClientMock_GetClusterGate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterGate_Call) RunAndReturn(run func(string) (*goclient.PipelineGateFragment, error)) *ClientMock_GetClusterGate_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterGates provides a mock function with given fields: after, first
func (_m *ClientMock) GetClusterGates(after *string, first *int64) (*goclient.PagedClusterGateIDs, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterGates")
	}

	var r0 *goclient.PagedClusterGateIDs
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*goclient.PagedClusterGateIDs, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *goclient.PagedClusterGateIDs); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.PagedClusterGateIDs)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterGates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterGates'
type ClientMock_GetClusterGates_Call struct {
	*mock.Call
}

// GetClusterGates is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) GetClusterGates(after interface{}, first interface{}) *ClientMock_GetClusterGates_Call {
	return &ClientMock_GetClusterGates_Call{Call: _e.mock.On("GetClusterGates", after, first)}
}

func (_c *ClientMock_GetClusterGates_Call) Run(run func(after *string, first *int64)) *ClientMock_GetClusterGates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_GetClusterGates_Call) Return(_a0 *goclient.PagedClusterGateIDs, _a1 error) *ClientMock_GetClusterGates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterGates_Call) RunAndReturn(run func(*string, *int64) (*goclient.PagedClusterGateIDs, error)) *ClientMock_GetClusterGates_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterRestore provides a mock function with given fields: id
func (_m *ClientMock) GetClusterRestore(id string) (*goclient.ClusterRestoreFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterRestore")
	}

	var r0 *goclient.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.ClusterRestoreFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.ClusterRestoreFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterRestore'
type ClientMock_GetClusterRestore_Call struct {
	*mock.Call
}

// GetClusterRestore is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetClusterRestore(id interface{}) *ClientMock_GetClusterRestore_Call {
	return &ClientMock_GetClusterRestore_Call{Call: _e.mock.On("GetClusterRestore", id)}
}

func (_c *ClientMock_GetClusterRestore_Call) Run(run func(id string)) *ClientMock_GetClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetClusterRestore_Call) Return(_a0 *goclient.ClusterRestoreFragment, _a1 error) *ClientMock_GetClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterRestore_Call) RunAndReturn(run func(string) (*goclient.ClusterRestoreFragment, error)) *ClientMock_GetClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields:
func (_m *ClientMock) GetCredentials() (string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// ClientMock_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type ClientMock_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
func (_e *ClientMock_Expecter) GetCredentials() *ClientMock_GetCredentials_Call {
	return &ClientMock_GetCredentials_Call{Call: _e.mock.On("GetCredentials")}
}

func (_c *ClientMock_GetCredentials_Call) Run(run func()) *ClientMock_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientMock_GetCredentials_Call) Return(url string, token string) *ClientMock_GetCredentials_Call {
	_c.Call.Return(url, token)
	return _c
}

func (_c *ClientMock_GetCredentials_Call) RunAndReturn(run func() (string, string)) *ClientMock_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: name
func (_m *ClientMock) GetGroup(name string) (*goclient.GroupFragment, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *goclient.GroupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.GroupFragment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.GroupFragment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.GroupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type ClientMock_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - name string
func (_e *ClientMock_Expecter) GetGroup(name interface{}) *ClientMock_GetGroup_Call {
	return &ClientMock_GetGroup_Call{Call: _e.mock.On("GetGroup", name)}
}

func (_c *ClientMock_GetGroup_Call) Run(run func(name string)) *ClientMock_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetGroup_Call) Return(_a0 *goclient.GroupFragment, _a1 error) *ClientMock_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetGroup_Call) RunAndReturn(run func(string) (*goclient.GroupFragment, error)) *ClientMock_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields: id
func (_m *ClientMock) GetNamespace(id string) (*goclient.ManagedNamespaceFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *goclient.ManagedNamespaceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.ManagedNamespaceFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.ManagedNamespaceFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ManagedNamespaceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type ClientMock_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetNamespace(id interface{}) *ClientMock_GetNamespace_Call {
	return &ClientMock_GetNamespace_Call{Call: _e.mock.On("GetNamespace", id)}
}

func (_c *ClientMock_GetNamespace_Call) Run(run func(id string)) *ClientMock_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetNamespace_Call) Return(_a0 *goclient.ManagedNamespaceFragment, _a1 error) *ClientMock_GetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetNamespace_Call) RunAndReturn(run func(string) (*goclient.ManagedNamespaceFragment, error)) *ClientMock_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetSentinelRunJob provides a mock function with given fields: id
func (_m *ClientMock) GetSentinelRunJob(id string) (*goclient.SentinelRunJobFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSentinelRunJob")
	}

	var r0 *goclient.SentinelRunJobFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.SentinelRunJobFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.SentinelRunJobFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.SentinelRunJobFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetSentinelRunJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSentinelRunJob'
type ClientMock_GetSentinelRunJob_Call struct {
	*mock.Call
}

// GetSentinelRunJob is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetSentinelRunJob(id interface{}) *ClientMock_GetSentinelRunJob_Call {
	return &ClientMock_GetSentinelRunJob_Call{Call: _e.mock.On("GetSentinelRunJob", id)}
}

func (_c *ClientMock_GetSentinelRunJob_Call) Run(run func(id string)) *ClientMock_GetSentinelRunJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetSentinelRunJob_Call) Return(_a0 *goclient.SentinelRunJobFragment, _a1 error) *ClientMock_GetSentinelRunJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetSentinelRunJob_Call) RunAndReturn(run func(string) (*goclient.SentinelRunJobFragment, error)) *ClientMock_GetSentinelRunJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: id
func (_m *ClientMock) GetService(id string) (*goclient.ServiceDeploymentForAgent, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *goclient.ServiceDeploymentForAgent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.ServiceDeploymentForAgent, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.ServiceDeploymentForAgent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ServiceDeploymentForAgent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type ClientMock_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetService(id interface{}) *ClientMock_GetService_Call {
	return &ClientMock_GetService_Call{Call: _e.mock.On("GetService", id)}
}

func (_c *ClientMock_GetService_Call) Run(run func(id string)) *ClientMock_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetService_Call) Return(_a0 *goclient.ServiceDeploymentForAgent, _a1 error) *ClientMock_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetService_Call) RunAndReturn(run func(string) (*goclient.ServiceDeploymentForAgent, error)) *ClientMock_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceDeploymentComponents provides a mock function with given fields: id
func (_m *ClientMock) GetServiceDeploymentComponents(id string) (*goclient.GetServiceDeploymentComponents_ServiceDeployment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceDeploymentComponents")
	}

	var r0 *goclient.GetServiceDeploymentComponents_ServiceDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.GetServiceDeploymentComponents_ServiceDeployment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.GetServiceDeploymentComponents_ServiceDeployment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.GetServiceDeploymentComponents_ServiceDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetServiceDeploymentComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceDeploymentComponents'
type ClientMock_GetServiceDeploymentComponents_Call struct {
	*mock.Call
}

// GetServiceDeploymentComponents is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetServiceDeploymentComponents(id interface{}) *ClientMock_GetServiceDeploymentComponents_Call {
	return &ClientMock_GetServiceDeploymentComponents_Call{Call: _e.mock.On("GetServiceDeploymentComponents", id)}
}

func (_c *ClientMock_GetServiceDeploymentComponents_Call) Run(run func(id string)) *ClientMock_GetServiceDeploymentComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetServiceDeploymentComponents_Call) Return(_a0 *goclient.GetServiceDeploymentComponents_ServiceDeployment, _a1 error) *ClientMock_GetServiceDeploymentComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetServiceDeploymentComponents_Call) RunAndReturn(run func(string) (*goclient.GetServiceDeploymentComponents_ServiceDeployment, error)) *ClientMock_GetServiceDeploymentComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function with given fields: after, first
func (_m *ClientMock) GetServices(after *string, first *int64) (*goclient.PagedClusterServicesForAgent, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 *goclient.PagedClusterServicesForAgent
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*goclient.PagedClusterServicesForAgent, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *goclient.PagedClusterServicesForAgent); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.PagedClusterServicesForAgent)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type ClientMock_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) GetServices(after interface{}, first interface{}) *ClientMock_GetServices_Call {
	return &ClientMock_GetServices_Call{Call: _e.mock.On("GetServices", after, first)}
}

func (_c *ClientMock_GetServices_Call) Run(run func(after *string, first *int64)) *ClientMock_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_GetServices_Call) Return(_a0 *goclient.PagedClusterServicesForAgent, _a1 error) *ClientMock_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetServices_Call) RunAndReturn(run func(*string, *int64) (*goclient.PagedClusterServicesForAgent, error)) *ClientMock_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetStackRun provides a mock function with given fields: id
func (_m *ClientMock) GetStackRun(id string) (*goclient.StackRunMinimalFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStackRun")
	}

	var r0 *goclient.StackRunMinimalFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.StackRunMinimalFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.StackRunMinimalFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.StackRunMinimalFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStackRun'
type ClientMock_GetStackRun_Call struct {
	*mock.Call
}

// GetStackRun is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetStackRun(id interface{}) *ClientMock_GetStackRun_Call {
	return &ClientMock_GetStackRun_Call{Call: _e.mock.On("GetStackRun", id)}
}

func (_c *ClientMock_GetStackRun_Call) Run(run func(id string)) *ClientMock_GetStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetStackRun_Call) Return(_a0 *goclient.StackRunMinimalFragment, _a1 error) *ClientMock_GetStackRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetStackRun_Call) RunAndReturn(run func(string) (*goclient.StackRunMinimalFragment, error)) *ClientMock_GetStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetStackRunBase provides a mock function with given fields: id
func (_m *ClientMock) GetStackRunBase(id string) (*v1.StackRun, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStackRunBase")
	}

	var r0 *v1.StackRun
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1.StackRun, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *v1.StackRun); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.StackRun)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetStackRunBase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStackRunBase'
type ClientMock_GetStackRunBase_Call struct {
	*mock.Call
}

// GetStackRunBase is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetStackRunBase(id interface{}) *ClientMock_GetStackRunBase_Call {
	return &ClientMock_GetStackRunBase_Call{Call: _e.mock.On("GetStackRunBase", id)}
}

func (_c *ClientMock_GetStackRunBase_Call) Run(run func(id string)) *ClientMock_GetStackRunBase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetStackRunBase_Call) Return(_a0 *v1.StackRun, _a1 error) *ClientMock_GetStackRunBase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetStackRunBase_Call) RunAndReturn(run func(string) (*v1.StackRun, error)) *ClientMock_GetStackRunBase_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: email
func (_m *ClientMock) GetUser(email string) (*goclient.UserFragment, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *goclient.UserFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*goclient.UserFragment, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *goclient.UserFragment); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.UserFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type ClientMock_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - email string
func (_e *ClientMock_Expecter) GetUser(email interface{}) *ClientMock_GetUser_Call {
	return &ClientMock_GetUser_Call{Call: _e.mock.On("GetUser", email)}
}

func (_c *ClientMock_GetUser_Call) Run(run func(email string)) *ClientMock_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetUser_Call) Return(_a0 *goclient.UserFragment, _a1 error) *ClientMock_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetUser_Call) RunAndReturn(run func(string) (*goclient.UserFragment, error)) *ClientMock_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// IngestClusterCost provides a mock function with given fields: attr
func (_m *ClientMock) IngestClusterCost(attr goclient.CostIngestAttributes) (*goclient.IngestClusterCost, error) {
	ret := _m.Called(attr)

	if len(ret) == 0 {
		panic("no return value specified for IngestClusterCost")
	}

	var r0 *goclient.IngestClusterCost
	var r1 error
	if rf, ok := ret.Get(0).(func(goclient.CostIngestAttributes) (*goclient.IngestClusterCost, error)); ok {
		return rf(attr)
	}
	if rf, ok := ret.Get(0).(func(goclient.CostIngestAttributes) *goclient.IngestClusterCost); ok {
		r0 = rf(attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.IngestClusterCost)
		}
	}

	if rf, ok := ret.Get(1).(func(goclient.CostIngestAttributes) error); ok {
		r1 = rf(attr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_IngestClusterCost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestClusterCost'
type ClientMock_IngestClusterCost_Call struct {
	*mock.Call
}

// IngestClusterCost is a helper method to define mock.On call
//   - attr goclient.CostIngestAttributes
func (_e *ClientMock_Expecter) IngestClusterCost(attr interface{}) *ClientMock_IngestClusterCost_Call {
	return &ClientMock_IngestClusterCost_Call{Call: _e.mock.On("IngestClusterCost", attr)}
}

func (_c *ClientMock_IngestClusterCost_Call) Run(run func(attr goclient.CostIngestAttributes)) *ClientMock_IngestClusterCost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(goclient.CostIngestAttributes))
	})
	return _c
}

func (_c *ClientMock_IngestClusterCost_Call) Return(_a0 *goclient.IngestClusterCost, _a1 error) *ClientMock_IngestClusterCost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_IngestClusterCost_Call) RunAndReturn(run func(goclient.CostIngestAttributes) (*goclient.IngestClusterCost, error)) *ClientMock_IngestClusterCost_Call {
	_c.Call.Return(run)
	return _c
}

// IsAgentRunExists provides a mock function with given fields: ctx, id
func (_m *ClientMock) IsAgentRunExists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsAgentRunExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_IsAgentRunExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAgentRunExists'
type ClientMock_IsAgentRunExists_Call struct {
	*mock.Call
}

// IsAgentRunExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientMock_Expecter) IsAgentRunExists(ctx interface{}, id interface{}) *ClientMock_IsAgentRunExists_Call {
	return &ClientMock_IsAgentRunExists_Call{Call: _e.mock.On("IsAgentRunExists", ctx, id)}
}

func (_c *ClientMock_IsAgentRunExists_Call) Run(run func(ctx context.Context, id string)) *ClientMock_IsAgentRunExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_IsAgentRunExists_Call) Return(_a0 bool, _a1 error) *ClientMock_IsAgentRunExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_IsAgentRunExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ClientMock_IsAgentRunExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsAgentRuntimeExists provides a mock function with given fields: ctx, id
func (_m *ClientMock) IsAgentRuntimeExists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsAgentRuntimeExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_IsAgentRuntimeExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAgentRuntimeExists'
type ClientMock_IsAgentRuntimeExists_Call struct {
	*mock.Call
}

// IsAgentRuntimeExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientMock_Expecter) IsAgentRuntimeExists(ctx interface{}, id interface{}) *ClientMock_IsAgentRuntimeExists_Call {
	return &ClientMock_IsAgentRuntimeExists_Call{Call: _e.mock.On("IsAgentRuntimeExists", ctx, id)}
}

func (_c *ClientMock_IsAgentRuntimeExists_Call) Run(run func(ctx context.Context, id string)) *ClientMock_IsAgentRuntimeExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_IsAgentRuntimeExists_Call) Return(_a0 bool, _a1 error) *ClientMock_IsAgentRuntimeExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_IsAgentRuntimeExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ClientMock_IsAgentRuntimeExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterExists provides a mock function with given fields: id
func (_m *ClientMock) IsClusterExists(id string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_IsClusterExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterExists'
type ClientMock_IsClusterExists_Call struct {
	*mock.Call
}

// IsClusterExists is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) IsClusterExists(id interface{}) *ClientMock_IsClusterExists_Call {
	return &ClientMock_IsClusterExists_Call{Call: _e.mock.On("IsClusterExists", id)}
}

func (_c *ClientMock_IsClusterExists_Call) Run(run func(id string)) *ClientMock_IsClusterExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_IsClusterExists_Call) Return(_a0 bool, _a1 error) *ClientMock_IsClusterExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_IsClusterExists_Call) RunAndReturn(run func(string) (bool, error)) *ClientMock_IsClusterExists_Call {
	_c.Call.Return(run)
	return _c
}

// ListAgentRuntime provides a mock function with given fields: ctx, after, first, q, typeArg
func (_m *ClientMock) ListAgentRuntime(ctx context.Context, after *string, first *int64, q *string, typeArg *goclient.AgentRuntimeType) (*goclient.ListAgentRuntimes_AgentRuntimes, error) {
	ret := _m.Called(ctx, after, first, q, typeArg)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentRuntime")
	}

	var r0 *goclient.ListAgentRuntimes_AgentRuntimes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *int64, *string, *goclient.AgentRuntimeType) (*goclient.ListAgentRuntimes_AgentRuntimes, error)); ok {
		return rf(ctx, after, first, q, typeArg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *int64, *string, *goclient.AgentRuntimeType) *goclient.ListAgentRuntimes_AgentRuntimes); ok {
		r0 = rf(ctx, after, first, q, typeArg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ListAgentRuntimes_AgentRuntimes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *int64, *string, *goclient.AgentRuntimeType) error); ok {
		r1 = rf(ctx, after, first, q, typeArg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ListAgentRuntime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAgentRuntime'
type ClientMock_ListAgentRuntime_Call struct {
	*mock.Call
}

// ListAgentRuntime is a helper method to define mock.On call
//   - ctx context.Context
//   - after *string
//   - first *int64
//   - q *string
//   - typeArg *goclient.AgentRuntimeType
func (_e *ClientMock_Expecter) ListAgentRuntime(ctx interface{}, after interface{}, first interface{}, q interface{}, typeArg interface{}) *ClientMock_ListAgentRuntime_Call {
	return &ClientMock_ListAgentRuntime_Call{Call: _e.mock.On("ListAgentRuntime", ctx, after, first, q, typeArg)}
}

func (_c *ClientMock_ListAgentRuntime_Call) Run(run func(ctx context.Context, after *string, first *int64, q *string, typeArg *goclient.AgentRuntimeType)) *ClientMock_ListAgentRuntime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string), args[2].(*int64), args[3].(*string), args[4].(*goclient.AgentRuntimeType))
	})
	return _c
}

func (_c *ClientMock_ListAgentRuntime_Call) Return(_a0 *goclient.ListAgentRuntimes_AgentRuntimes, _a1 error) *ClientMock_ListAgentRuntime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ListAgentRuntime_Call) RunAndReturn(run func(context.Context, *string, *int64, *string, *goclient.AgentRuntimeType) (*goclient.ListAgentRuntimes_AgentRuntimes, error)) *ClientMock_ListAgentRuntime_Call {
	_c.Call.Return(run)
	return _c
}

// ListAgentRuntimePendingRuns provides a mock function with given fields: ctx, id, after, first
func (_m *ClientMock) ListAgentRuntimePendingRuns(ctx context.Context, id string, after *string, first *int64) (*goclient.ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns, error) {
	ret := _m.Called(ctx, id, after, first)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentRuntimePendingRuns")
	}

	var r0 *goclient.ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, *int64) (*goclient.ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns, error)); ok {
		return rf(ctx, id, after, first)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, *int64) *goclient.ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns); ok {
		r0 = rf(ctx, id, after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *string, *int64) error); ok {
		r1 = rf(ctx, id, after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ListAgentRuntimePendingRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAgentRuntimePendingRuns'
type ClientMock_ListAgentRuntimePendingRuns_Call struct {
	*mock.Call
}

// ListAgentRuntimePendingRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) ListAgentRuntimePendingRuns(ctx interface{}, id interface{}, after interface{}, first interface{}) *ClientMock_ListAgentRuntimePendingRuns_Call {
	return &ClientMock_ListAgentRuntimePendingRuns_Call{Call: _e.mock.On("ListAgentRuntimePendingRuns", ctx, id, after, first)}
}

func (_c *ClientMock_ListAgentRuntimePendingRuns_Call) Run(run func(ctx context.Context, id string, after *string, first *int64)) *ClientMock_ListAgentRuntimePendingRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*string), args[3].(*int64))
	})
	return _c
}

func (_c *ClientMock_ListAgentRuntimePendingRuns_Call) Return(_a0 *goclient.ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns, _a1 error) *ClientMock_ListAgentRuntimePendingRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ListAgentRuntimePendingRuns_Call) RunAndReturn(run func(context.Context, string, *string, *int64) (*goclient.ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns, error)) *ClientMock_ListAgentRuntimePendingRuns_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterSentinelRunJobs provides a mock function with given fields: after, first
func (_m *ClientMock) ListClusterSentinelRunJobs(after *string, first *int64) (*goclient.ListClusterSentinelRunJobs_ClusterSentinelRunJobs, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSentinelRunJobs")
	}

	var r0 *goclient.ListClusterSentinelRunJobs_ClusterSentinelRunJobs
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*goclient.ListClusterSentinelRunJobs_ClusterSentinelRunJobs, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *goclient.ListClusterSentinelRunJobs_ClusterSentinelRunJobs); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ListClusterSentinelRunJobs_ClusterSentinelRunJobs)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ListClusterSentinelRunJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterSentinelRunJobs'
type ClientMock_ListClusterSentinelRunJobs_Call struct {
	*mock.Call
}

// ListClusterSentinelRunJobs is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) ListClusterSentinelRunJobs(after interface{}, first interface{}) *ClientMock_ListClusterSentinelRunJobs_Call {
	return &ClientMock_ListClusterSentinelRunJobs_Call{Call: _e.mock.On("ListClusterSentinelRunJobs", after, first)}
}

func (_c *ClientMock_ListClusterSentinelRunJobs_Call) Run(run func(after *string, first *int64)) *ClientMock_ListClusterSentinelRunJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_ListClusterSentinelRunJobs_Call) Return(_a0 *goclient.ListClusterSentinelRunJobs_ClusterSentinelRunJobs, _a1 error) *ClientMock_ListClusterSentinelRunJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ListClusterSentinelRunJobs_Call) RunAndReturn(run func(*string, *int64) (*goclient.ListClusterSentinelRunJobs_ClusterSentinelRunJobs, error)) *ClientMock_ListClusterSentinelRunJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterStackRuns provides a mock function with given fields: after, first
func (_m *ClientMock) ListClusterStackRuns(after *string, first *int64) (*goclient.ListClusterMinimalStacks_ClusterStackRuns, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterStackRuns")
	}

	var r0 *goclient.ListClusterMinimalStacks_ClusterStackRuns
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*goclient.ListClusterMinimalStacks_ClusterStackRuns, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *goclient.ListClusterMinimalStacks_ClusterStackRuns); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ListClusterMinimalStacks_ClusterStackRuns)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ListClusterStackRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterStackRuns'
type ClientMock_ListClusterStackRuns_Call struct {
	*mock.Call
}

// ListClusterStackRuns is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) ListClusterStackRuns(after interface{}, first interface{}) *ClientMock_ListClusterStackRuns_Call {
	return &ClientMock_ListClusterStackRuns_Call{Call: _e.mock.On("ListClusterStackRuns", after, first)}
}

func (_c *ClientMock_ListClusterStackRuns_Call) Run(run func(after *string, first *int64)) *ClientMock_ListClusterStackRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_ListClusterStackRuns_Call) Return(_a0 *goclient.ListClusterMinimalStacks_ClusterStackRuns, _a1 error) *ClientMock_ListClusterStackRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ListClusterStackRuns_Call) RunAndReturn(run func(*string, *int64) (*goclient.ListClusterMinimalStacks_ClusterStackRuns, error)) *ClientMock_ListClusterStackRuns_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields: after, first
func (_m *ClientMock) ListNamespaces(after *string, first *int64) (*goclient.ListClusterNamespaces_ClusterManagedNamespaces, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *goclient.ListClusterNamespaces_ClusterManagedNamespaces
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*goclient.ListClusterNamespaces_ClusterManagedNamespaces, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *goclient.ListClusterNamespaces_ClusterManagedNamespaces); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ListClusterNamespaces_ClusterManagedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type ClientMock_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) ListNamespaces(after interface{}, first interface{}) *ClientMock_ListNamespaces_Call {
	return &ClientMock_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces", after, first)}
}

func (_c *ClientMock_ListNamespaces_Call) Run(run func(after *string, first *int64)) *ClientMock_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_ListNamespaces_Call) Return(_a0 *goclient.ListClusterNamespaces_ClusterManagedNamespaces, _a1 error) *ClientMock_ListNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ListNamespaces_Call) RunAndReturn(run func(*string, *int64) (*goclient.ListClusterNamespaces_ClusterManagedNamespaces, error)) *ClientMock_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// MyCluster provides a mock function with given fields:
func (_m *ClientMock) MyCluster() (*goclient.MyCluster, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MyCluster")
	}

	var r0 *goclient.MyCluster
	var r1 error
	if rf, ok := ret.Get(0).(func() (*goclient.MyCluster, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *goclient.MyCluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.MyCluster)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_MyCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MyCluster'
type ClientMock_MyCluster_Call struct {
	*mock.Call
}

// MyCluster is a helper method to define mock.On call
func (_e *ClientMock_Expecter) MyCluster() *ClientMock_MyCluster_Call {
	return &ClientMock_MyCluster_Call{Call: _e.mock.On("MyCluster")}
}

func (_c *ClientMock_MyCluster_Call) Run(run func()) *ClientMock_MyCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientMock_MyCluster_Call) Return(_a0 *goclient.MyCluster, _a1 error) *ClientMock_MyCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_MyCluster_Call) RunAndReturn(run func() (*goclient.MyCluster, error)) *ClientMock_MyCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ParsePipelineGateCR provides a mock function with given fields: pgFragment, operatorNamespace
func (_m *ClientMock) ParsePipelineGateCR(pgFragment *goclient.PipelineGateFragment, operatorNamespace string) (*v1alpha1.PipelineGate, error) {
	ret := _m.Called(pgFragment, operatorNamespace)

	if len(ret) == 0 {
		panic("no return value specified for ParsePipelineGateCR")
	}

	var r0 *v1alpha1.PipelineGate
	var r1 error
	if rf, ok := ret.Get(0).(func(*goclient.PipelineGateFragment, string) (*v1alpha1.PipelineGate, error)); ok {
		return rf(pgFragment, operatorNamespace)
	}
	if rf, ok := ret.Get(0).(func(*goclient.PipelineGateFragment, string) *v1alpha1.PipelineGate); ok {
		r0 = rf(pgFragment, operatorNamespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PipelineGate)
		}
	}

	if rf, ok := ret.Get(1).(func(*goclient.PipelineGateFragment, string) error); ok {
		r1 = rf(pgFragment, operatorNamespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ParsePipelineGateCR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParsePipelineGateCR'
type ClientMock_ParsePipelineGateCR_Call struct {
	*mock.Call
}

// ParsePipelineGateCR is a helper method to define mock.On call
//   - pgFragment *goclient.PipelineGateFragment
//   - operatorNamespace string
func (_e *ClientMock_Expecter) ParsePipelineGateCR(pgFragment interface{}, operatorNamespace interface{}) *ClientMock_ParsePipelineGateCR_Call {
	return &ClientMock_ParsePipelineGateCR_Call{Call: _e.mock.On("ParsePipelineGateCR", pgFragment, operatorNamespace)}
}

func (_c *ClientMock_ParsePipelineGateCR_Call) Run(run func(pgFragment *goclient.PipelineGateFragment, operatorNamespace string)) *ClientMock_ParsePipelineGateCR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*goclient.PipelineGateFragment), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_ParsePipelineGateCR_Call) Return(_a0 *v1alpha1.PipelineGate, _a1 error) *ClientMock_ParsePipelineGateCR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ParsePipelineGateCR_Call) RunAndReturn(run func(*goclient.PipelineGateFragment, string) (*v1alpha1.PipelineGate, error)) *ClientMock_ParsePipelineGateCR_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: vsn
func (_m *ClientMock) Ping(vsn string) error {
	ret := _m.Called(vsn)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(vsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type ClientMock_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - vsn string
func (_e *ClientMock_Expecter) Ping(vsn interface{}) *ClientMock_Ping_Call {
	return &ClientMock_Ping_Call{Call: _e.mock.On("Ping", vsn)}
}

func (_c *ClientMock_Ping_Call) Run(run func(vsn string)) *ClientMock_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_Ping_Call) Return(_a0 error) *ClientMock_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_Ping_Call) RunAndReturn(run func(string) error) *ClientMock_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PingCluster provides a mock function with given fields: attributes
func (_m *ClientMock) PingCluster(attributes goclient.ClusterPing) error {
	ret := _m.Called(attributes)

	if len(ret) == 0 {
		panic("no return value specified for PingCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(goclient.ClusterPing) error); ok {
		r0 = rf(attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_PingCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingCluster'
type ClientMock_PingCluster_Call struct {
	*mock.Call
}

// PingCluster is a helper method to define mock.On call
//   - attributes goclient.ClusterPing
func (_e *ClientMock_Expecter) PingCluster(attributes interface{}) *ClientMock_PingCluster_Call {
	return &ClientMock_PingCluster_Call{Call: _e.mock.On("PingCluster", attributes)}
}

func (_c *ClientMock_PingCluster_Call) Run(run func(attributes goclient.ClusterPing)) *ClientMock_PingCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(goclient.ClusterPing))
	})
	return _c
}

func (_c *ClientMock_PingCluster_Call) Return(_a0 error) *ClientMock_PingCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_PingCluster_Call) RunAndReturn(run func(goclient.ClusterPing) error) *ClientMock_PingCluster_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRuntimeServices provides a mock function with given fields: svcs, deprecated, serviceId, serviceMesh
func (_m *ClientMock) RegisterRuntimeServices(svcs map[string]client.NamespaceVersion, deprecated []goclient.DeprecatedCustomResourceAttributes, serviceId *string, serviceMesh *goclient.ServiceMesh) error {
	ret := _m.Called(svcs, deprecated, serviceId, serviceMesh)

	if len(ret) == 0 {
		panic("no return value specified for RegisterRuntimeServices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]client.NamespaceVersion, []goclient.DeprecatedCustomResourceAttributes, *string, *goclient.ServiceMesh) error); ok {
		r0 = rf(svcs, deprecated, serviceId, serviceMesh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_RegisterRuntimeServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRuntimeServices'
type ClientMock_RegisterRuntimeServices_Call struct {
	*mock.Call
}

// RegisterRuntimeServices is a helper method to define mock.On call
//   - svcs map[string]client.NamespaceVersion
//   - deprecated []goclient.DeprecatedCustomResourceAttributes
//   - serviceId *string
//   - serviceMesh *goclient.ServiceMesh
func (_e *ClientMock_Expecter) RegisterRuntimeServices(svcs interface{}, deprecated interface{}, serviceId interface{}, serviceMesh interface{}) *ClientMock_RegisterRuntimeServices_Call {
	return &ClientMock_RegisterRuntimeServices_Call{Call: _e.mock.On("RegisterRuntimeServices", svcs, deprecated, serviceId, serviceMesh)}
}

func (_c *ClientMock_RegisterRuntimeServices_Call) Run(run func(svcs map[string]client.NamespaceVersion, deprecated []goclient.DeprecatedCustomResourceAttributes, serviceId *string, serviceMesh *goclient.ServiceMesh)) *ClientMock_RegisterRuntimeServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]client.NamespaceVersion), args[1].([]goclient.DeprecatedCustomResourceAttributes), args[2].(*string), args[3].(*goclient.ServiceMesh))
	})
	return _c
}

func (_c *ClientMock_RegisterRuntimeServices_Call) Return(_a0 error) *ClientMock_RegisterRuntimeServices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_RegisterRuntimeServices_Call) RunAndReturn(run func(map[string]client.NamespaceVersion, []goclient.DeprecatedCustomResourceAttributes, *string, *goclient.ServiceMesh) error) *ClientMock_RegisterRuntimeServices_Call {
	_c.Call.Return(run)
	return _c
}

// SaveClusterBackup provides a mock function with given fields: attrs
func (_m *ClientMock) SaveClusterBackup(attrs goclient.BackupAttributes) (*goclient.ClusterBackupFragment, error) {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for SaveClusterBackup")
	}

	var r0 *goclient.ClusterBackupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(goclient.BackupAttributes) (*goclient.ClusterBackupFragment, error)); ok {
		return rf(attrs)
	}
	if rf, ok := ret.Get(0).(func(goclient.BackupAttributes) *goclient.ClusterBackupFragment); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ClusterBackupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(goclient.BackupAttributes) error); ok {
		r1 = rf(attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_SaveClusterBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveClusterBackup'
type ClientMock_SaveClusterBackup_Call struct {
	*mock.Call
}

// SaveClusterBackup is a helper method to define mock.On call
//   - attrs goclient.BackupAttributes
func (_e *ClientMock_Expecter) SaveClusterBackup(attrs interface{}) *ClientMock_SaveClusterBackup_Call {
	return &ClientMock_SaveClusterBackup_Call{Call: _e.mock.On("SaveClusterBackup", attrs)}
}

func (_c *ClientMock_SaveClusterBackup_Call) Run(run func(attrs goclient.BackupAttributes)) *ClientMock_SaveClusterBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(goclient.BackupAttributes))
	})
	return _c
}

func (_c *ClientMock_SaveClusterBackup_Call) Return(_a0 *goclient.ClusterBackupFragment, _a1 error) *ClientMock_SaveClusterBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_SaveClusterBackup_Call) RunAndReturn(run func(goclient.BackupAttributes) (*goclient.ClusterBackupFragment, error)) *ClientMock_SaveClusterBackup_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUpgradeInsights provides a mock function with given fields: attributes, addons
func (_m *ClientMock) SaveUpgradeInsights(attributes []*goclient.UpgradeInsightAttributes, addons []*goclient.CloudAddonAttributes) (*goclient.SaveUpgradeInsights, error) {
	ret := _m.Called(attributes, addons)

	if len(ret) == 0 {
		panic("no return value specified for SaveUpgradeInsights")
	}

	var r0 *goclient.SaveUpgradeInsights
	var r1 error
	if rf, ok := ret.Get(0).(func([]*goclient.UpgradeInsightAttributes, []*goclient.CloudAddonAttributes) (*goclient.SaveUpgradeInsights, error)); ok {
		return rf(attributes, addons)
	}
	if rf, ok := ret.Get(0).(func([]*goclient.UpgradeInsightAttributes, []*goclient.CloudAddonAttributes) *goclient.SaveUpgradeInsights); ok {
		r0 = rf(attributes, addons)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.SaveUpgradeInsights)
		}
	}

	if rf, ok := ret.Get(1).(func([]*goclient.UpgradeInsightAttributes, []*goclient.CloudAddonAttributes) error); ok {
		r1 = rf(attributes, addons)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_SaveUpgradeInsights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUpgradeInsights'
type ClientMock_SaveUpgradeInsights_Call struct {
	*mock.Call
}

// SaveUpgradeInsights is a helper method to define mock.On call
//   - attributes []*goclient.UpgradeInsightAttributes
//   - addons []*goclient.CloudAddonAttributes
func (_e *ClientMock_Expecter) SaveUpgradeInsights(attributes interface{}, addons interface{}) *ClientMock_SaveUpgradeInsights_Call {
	return &ClientMock_SaveUpgradeInsights_Call{Call: _e.mock.On("SaveUpgradeInsights", attributes, addons)}
}

func (_c *ClientMock_SaveUpgradeInsights_Call) Run(run func(attributes []*goclient.UpgradeInsightAttributes, addons []*goclient.CloudAddonAttributes)) *ClientMock_SaveUpgradeInsights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*goclient.UpgradeInsightAttributes), args[1].([]*goclient.CloudAddonAttributes))
	})
	return _c
}

func (_c *ClientMock_SaveUpgradeInsights_Call) Return(_a0 *goclient.SaveUpgradeInsights, _a1 error) *ClientMock_SaveUpgradeInsights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_SaveUpgradeInsights_Call) RunAndReturn(run func([]*goclient.UpgradeInsightAttributes, []*goclient.CloudAddonAttributes) (*goclient.SaveUpgradeInsights, error)) *ClientMock_SaveUpgradeInsights_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAgentRun provides a mock function with given fields: ctx, id, attrs
func (_m *ClientMock) UpdateAgentRun(ctx context.Context, id string, attrs goclient.AgentRunStatusAttributes) (*goclient.AgentRunFragment, error) {
	ret := _m.Called(ctx, id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentRun")
	}

	var r0 *goclient.AgentRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentRunStatusAttributes) (*goclient.AgentRunFragment, error)); ok {
		return rf(ctx, id, attrs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentRunStatusAttributes) *goclient.AgentRunFragment); ok {
		r0 = rf(ctx, id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.AgentRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, goclient.AgentRunStatusAttributes) error); ok {
		r1 = rf(ctx, id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpdateAgentRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAgentRun'
type ClientMock_UpdateAgentRun_Call struct {
	*mock.Call
}

// UpdateAgentRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attrs goclient.AgentRunStatusAttributes
func (_e *ClientMock_Expecter) UpdateAgentRun(ctx interface{}, id interface{}, attrs interface{}) *ClientMock_UpdateAgentRun_Call {
	return &ClientMock_UpdateAgentRun_Call{Call: _e.mock.On("UpdateAgentRun", ctx, id, attrs)}
}

func (_c *ClientMock_UpdateAgentRun_Call) Run(run func(ctx context.Context, id string, attrs goclient.AgentRunStatusAttributes)) *ClientMock_UpdateAgentRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(goclient.AgentRunStatusAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateAgentRun_Call) Return(_a0 *goclient.AgentRunFragment, _a1 error) *ClientMock_UpdateAgentRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpdateAgentRun_Call) RunAndReturn(run func(context.Context, string, goclient.AgentRunStatusAttributes) (*goclient.AgentRunFragment, error)) *ClientMock_UpdateAgentRun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAgentRunAnalysis provides a mock function with given fields: ctx, runtimeID, attrs
func (_m *ClientMock) UpdateAgentRunAnalysis(ctx context.Context, runtimeID string, attrs goclient.AgentAnalysisAttributes) (*goclient.AgentRunFragment, error) {
	ret := _m.Called(ctx, runtimeID, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentRunAnalysis")
	}

	var r0 *goclient.AgentRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentAnalysisAttributes) (*goclient.AgentRunFragment, error)); ok {
		return rf(ctx, runtimeID, attrs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, goclient.AgentAnalysisAttributes) *goclient.AgentRunFragment); ok {
		r0 = rf(ctx, runtimeID, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.AgentRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, goclient.AgentAnalysisAttributes) error); ok {
		r1 = rf(ctx, runtimeID, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpdateAgentRunAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAgentRunAnalysis'
type ClientMock_UpdateAgentRunAnalysis_Call struct {
	*mock.Call
}

// UpdateAgentRunAnalysis is a helper method to define mock.On call
//   - ctx context.Context
//   - runtimeID string
//   - attrs goclient.AgentAnalysisAttributes
func (_e *ClientMock_Expecter) UpdateAgentRunAnalysis(ctx interface{}, runtimeID interface{}, attrs interface{}) *ClientMock_UpdateAgentRunAnalysis_Call {
	return &ClientMock_UpdateAgentRunAnalysis_Call{Call: _e.mock.On("UpdateAgentRunAnalysis", ctx, runtimeID, attrs)}
}

func (_c *ClientMock_UpdateAgentRunAnalysis_Call) Run(run func(ctx context.Context, runtimeID string, attrs goclient.AgentAnalysisAttributes)) *ClientMock_UpdateAgentRunAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(goclient.AgentAnalysisAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateAgentRunAnalysis_Call) Return(_a0 *goclient.AgentRunFragment, _a1 error) *ClientMock_UpdateAgentRunAnalysis_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpdateAgentRunAnalysis_Call) RunAndReturn(run func(context.Context, string, goclient.AgentAnalysisAttributes) (*goclient.AgentRunFragment, error)) *ClientMock_UpdateAgentRunAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAgentRunTodos provides a mock function with given fields: ctx, id, attrs
func (_m *ClientMock) UpdateAgentRunTodos(ctx context.Context, id string, attrs []*goclient.AgentTodoAttributes) (*goclient.AgentRunFragment, error) {
	ret := _m.Called(ctx, id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentRunTodos")
	}

	var r0 *goclient.AgentRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*goclient.AgentTodoAttributes) (*goclient.AgentRunFragment, error)); ok {
		return rf(ctx, id, attrs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*goclient.AgentTodoAttributes) *goclient.AgentRunFragment); ok {
		r0 = rf(ctx, id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.AgentRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*goclient.AgentTodoAttributes) error); ok {
		r1 = rf(ctx, id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpdateAgentRunTodos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAgentRunTodos'
type ClientMock_UpdateAgentRunTodos_Call struct {
	*mock.Call
}

// UpdateAgentRunTodos is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attrs []*goclient.AgentTodoAttributes
func (_e *ClientMock_Expecter) UpdateAgentRunTodos(ctx interface{}, id interface{}, attrs interface{}) *ClientMock_UpdateAgentRunTodos_Call {
	return &ClientMock_UpdateAgentRunTodos_Call{Call: _e.mock.On("UpdateAgentRunTodos", ctx, id, attrs)}
}

func (_c *ClientMock_UpdateAgentRunTodos_Call) Run(run func(ctx context.Context, id string, attrs []*goclient.AgentTodoAttributes)) *ClientMock_UpdateAgentRunTodos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*goclient.AgentTodoAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateAgentRunTodos_Call) Return(_a0 *goclient.AgentRunFragment, _a1 error) *ClientMock_UpdateAgentRunTodos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpdateAgentRunTodos_Call) RunAndReturn(run func(context.Context, string, []*goclient.AgentTodoAttributes) (*goclient.AgentRunFragment, error)) *ClientMock_UpdateAgentRunTodos_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterRestore provides a mock function with given fields: id, attrs
func (_m *ClientMock) UpdateClusterRestore(id string, attrs goclient.RestoreAttributes) (*goclient.ClusterRestoreFragment, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterRestore")
	}

	var r0 *goclient.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, goclient.RestoreAttributes) (*goclient.ClusterRestoreFragment, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, goclient.RestoreAttributes) *goclient.ClusterRestoreFragment); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, goclient.RestoreAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpdateClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterRestore'
type ClientMock_UpdateClusterRestore_Call struct {
	*mock.Call
}

// UpdateClusterRestore is a helper method to define mock.On call
//   - id string
//   - attrs goclient.RestoreAttributes
func (_e *ClientMock_Expecter) UpdateClusterRestore(id interface{}, attrs interface{}) *ClientMock_UpdateClusterRestore_Call {
	return &ClientMock_UpdateClusterRestore_Call{Call: _e.mock.On("UpdateClusterRestore", id, attrs)}
}

func (_c *ClientMock_UpdateClusterRestore_Call) Run(run func(id string, attrs goclient.RestoreAttributes)) *ClientMock_UpdateClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(goclient.RestoreAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateClusterRestore_Call) Return(_a0 *goclient.ClusterRestoreFragment, _a1 error) *ClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpdateClusterRestore_Call) RunAndReturn(run func(string, goclient.RestoreAttributes) (*goclient.ClusterRestoreFragment, error)) *ClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponents provides a mock function with given fields: id, revisionID, sha, components, errs, metadata
func (_m *ClientMock) UpdateComponents(id string, revisionID string, sha *string, components []*goclient.ComponentAttributes, errs []*goclient.ServiceErrorAttributes, metadata *goclient.ServiceMetadataAttributes) error {
	ret := _m.Called(id, revisionID, sha, components, errs, metadata)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *string, []*goclient.ComponentAttributes, []*goclient.ServiceErrorAttributes, *goclient.ServiceMetadataAttributes) error); ok {
		r0 = rf(id, revisionID, sha, components, errs, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponents'
type ClientMock_UpdateComponents_Call struct {
	*mock.Call
}

// UpdateComponents is a helper method to define mock.On call
//   - id string
//   - revisionID string
//   - sha *string
//   - components []*goclient.ComponentAttributes
//   - errs []*goclient.ServiceErrorAttributes
//   - metadata *goclient.ServiceMetadataAttributes
func (_e *ClientMock_Expecter) UpdateComponents(id interface{}, revisionID interface{}, sha interface{}, components interface{}, errs interface{}, metadata interface{}) *ClientMock_UpdateComponents_Call {
	return &ClientMock_UpdateComponents_Call{Call: _e.mock.On("UpdateComponents", id, revisionID, sha, components, errs, metadata)}
}

func (_c *ClientMock_UpdateComponents_Call) Run(run func(id string, revisionID string, sha *string, components []*goclient.ComponentAttributes, errs []*goclient.ServiceErrorAttributes, metadata *goclient.ServiceMetadataAttributes)) *ClientMock_UpdateComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*string), args[3].([]*goclient.ComponentAttributes), args[4].([]*goclient.ServiceErrorAttributes), args[5].(*goclient.ServiceMetadataAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateComponents_Call) Return(_a0 error) *ClientMock_UpdateComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateComponents_Call) RunAndReturn(run func(string, string, *string, []*goclient.ComponentAttributes, []*goclient.ServiceErrorAttributes, *goclient.ServiceMetadataAttributes) error) *ClientMock_UpdateComponents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGate provides a mock function with given fields: id, attributes
func (_m *ClientMock) UpdateGate(id string, attributes goclient.GateUpdateAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, goclient.GateUpdateAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGate'
type ClientMock_UpdateGate_Call struct {
	*mock.Call
}

// UpdateGate is a helper method to define mock.On call
//   - id string
//   - attributes goclient.GateUpdateAttributes
func (_e *ClientMock_Expecter) UpdateGate(id interface{}, attributes interface{}) *ClientMock_UpdateGate_Call {
	return &ClientMock_UpdateGate_Call{Call: _e.mock.On("UpdateGate", id, attributes)}
}

func (_c *ClientMock_UpdateGate_Call) Run(run func(id string, attributes goclient.GateUpdateAttributes)) *ClientMock_UpdateGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(goclient.GateUpdateAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateGate_Call) Return(_a0 error) *ClientMock_UpdateGate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateGate_Call) RunAndReturn(run func(string, goclient.GateUpdateAttributes) error) *ClientMock_UpdateGate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSentinelRunJobStatus provides a mock function with given fields: id, attr
func (_m *ClientMock) UpdateSentinelRunJobStatus(id string, attr *goclient.SentinelRunJobUpdateAttributes) error {
	ret := _m.Called(id, attr)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSentinelRunJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *goclient.SentinelRunJobUpdateAttributes) error); ok {
		r0 = rf(id, attr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateSentinelRunJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSentinelRunJobStatus'
type ClientMock_UpdateSentinelRunJobStatus_Call struct {
	*mock.Call
}

// UpdateSentinelRunJobStatus is a helper method to define mock.On call
//   - id string
//   - attr *goclient.SentinelRunJobUpdateAttributes
func (_e *ClientMock_Expecter) UpdateSentinelRunJobStatus(id interface{}, attr interface{}) *ClientMock_UpdateSentinelRunJobStatus_Call {
	return &ClientMock_UpdateSentinelRunJobStatus_Call{Call: _e.mock.On("UpdateSentinelRunJobStatus", id, attr)}
}

func (_c *ClientMock_UpdateSentinelRunJobStatus_Call) Run(run func(id string, attr *goclient.SentinelRunJobUpdateAttributes)) *ClientMock_UpdateSentinelRunJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*goclient.SentinelRunJobUpdateAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateSentinelRunJobStatus_Call) Return(_a0 error) *ClientMock_UpdateSentinelRunJobStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateSentinelRunJobStatus_Call) RunAndReturn(run func(string, *goclient.SentinelRunJobUpdateAttributes) error) *ClientMock_UpdateSentinelRunJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceErrors provides a mock function with given fields: id, errs
func (_m *ClientMock) UpdateServiceErrors(id string, errs []*goclient.ServiceErrorAttributes) error {
	ret := _m.Called(id, errs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceErrors")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*goclient.ServiceErrorAttributes) error); ok {
		r0 = rf(id, errs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateServiceErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceErrors'
type ClientMock_UpdateServiceErrors_Call struct {
	*mock.Call
}

// UpdateServiceErrors is a helper method to define mock.On call
//   - id string
//   - errs []*goclient.ServiceErrorAttributes
func (_e *ClientMock_Expecter) UpdateServiceErrors(id interface{}, errs interface{}) *ClientMock_UpdateServiceErrors_Call {
	return &ClientMock_UpdateServiceErrors_Call{Call: _e.mock.On("UpdateServiceErrors", id, errs)}
}

func (_c *ClientMock_UpdateServiceErrors_Call) Run(run func(id string, errs []*goclient.ServiceErrorAttributes)) *ClientMock_UpdateServiceErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*goclient.ServiceErrorAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateServiceErrors_Call) Return(_a0 error) *ClientMock_UpdateServiceErrors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateServiceErrors_Call) RunAndReturn(run func(string, []*goclient.ServiceErrorAttributes) error) *ClientMock_UpdateServiceErrors_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStackRun provides a mock function with given fields: id, attributes
func (_m *ClientMock) UpdateStackRun(id string, attributes goclient.StackRunAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStackRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, goclient.StackRunAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackRun'
type ClientMock_UpdateStackRun_Call struct {
	*mock.Call
}

// UpdateStackRun is a helper method to define mock.On call
//   - id string
//   - attributes goclient.StackRunAttributes
func (_e *ClientMock_Expecter) UpdateStackRun(id interface{}, attributes interface{}) *ClientMock_UpdateStackRun_Call {
	return &ClientMock_UpdateStackRun_Call{Call: _e.mock.On("UpdateStackRun", id, attributes)}
}

func (_c *ClientMock_UpdateStackRun_Call) Run(run func(id string, attributes goclient.StackRunAttributes)) *ClientMock_UpdateStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(goclient.StackRunAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateStackRun_Call) Return(_a0 error) *ClientMock_UpdateStackRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateStackRun_Call) RunAndReturn(run func(string, goclient.StackRunAttributes) error) *ClientMock_UpdateStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStackRunStep provides a mock function with given fields: id, attributes
func (_m *ClientMock) UpdateStackRunStep(id string, attributes goclient.RunStepAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStackRunStep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, goclient.RunStepAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateStackRunStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackRunStep'
type ClientMock_UpdateStackRunStep_Call struct {
	*mock.Call
}

// UpdateStackRunStep is a helper method to define mock.On call
//   - id string
//   - attributes goclient.RunStepAttributes
func (_e *ClientMock_Expecter) UpdateStackRunStep(id interface{}, attributes interface{}) *ClientMock_UpdateStackRunStep_Call {
	return &ClientMock_UpdateStackRunStep_Call{Call: _e.mock.On("UpdateStackRunStep", id, attributes)}
}

func (_c *ClientMock_UpdateStackRunStep_Call) Run(run func(id string, attributes goclient.RunStepAttributes)) *ClientMock_UpdateStackRunStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(goclient.RunStepAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateStackRunStep_Call) Return(_a0 error) *ClientMock_UpdateStackRunStep_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateStackRunStep_Call) RunAndReturn(run func(string, goclient.RunStepAttributes) error) *ClientMock_UpdateStackRunStep_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertAgentRuntime provides a mock function with given fields: ctx, attrs
func (_m *ClientMock) UpsertAgentRuntime(ctx context.Context, attrs goclient.AgentRuntimeAttributes) (*goclient.AgentRuntimeFragment, error) {
	ret := _m.Called(ctx, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpsertAgentRuntime")
	}

	var r0 *goclient.AgentRuntimeFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goclient.AgentRuntimeAttributes) (*goclient.AgentRuntimeFragment, error)); ok {
		return rf(ctx, attrs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goclient.AgentRuntimeAttributes) *goclient.AgentRuntimeFragment); ok {
		r0 = rf(ctx, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.AgentRuntimeFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, goclient.AgentRuntimeAttributes) error); ok {
		r1 = rf(ctx, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpsertAgentRuntime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertAgentRuntime'
type ClientMock_UpsertAgentRuntime_Call struct {
	*mock.Call
}

// UpsertAgentRuntime is a helper method to define mock.On call
//   - ctx context.Context
//   - attrs goclient.AgentRuntimeAttributes
func (_e *ClientMock_Expecter) UpsertAgentRuntime(ctx interface{}, attrs interface{}) *ClientMock_UpsertAgentRuntime_Call {
	return &ClientMock_UpsertAgentRuntime_Call{Call: _e.mock.On("UpsertAgentRuntime", ctx, attrs)}
}

func (_c *ClientMock_UpsertAgentRuntime_Call) Run(run func(ctx context.Context, attrs goclient.AgentRuntimeAttributes)) *ClientMock_UpsertAgentRuntime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(goclient.AgentRuntimeAttributes))
	})
	return _c
}

func (_c *ClientMock_UpsertAgentRuntime_Call) Return(_a0 *goclient.AgentRuntimeFragment, _a1 error) *ClientMock_UpsertAgentRuntime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpsertAgentRuntime_Call) RunAndReturn(run func(context.Context, goclient.AgentRuntimeAttributes) (*goclient.AgentRuntimeFragment, error)) *ClientMock_UpsertAgentRuntime_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertConstraints provides a mock function with given fields: constraints
func (_m *ClientMock) UpsertConstraints(constraints []goclient.PolicyConstraintAttributes) (*goclient.UpsertPolicyConstraints, error) {
	ret := _m.Called(constraints)

	if len(ret) == 0 {
		panic("no return value specified for UpsertConstraints")
	}

	var r0 *goclient.UpsertPolicyConstraints
	var r1 error
	if rf, ok := ret.Get(0).(func([]goclient.PolicyConstraintAttributes) (*goclient.UpsertPolicyConstraints, error)); ok {
		return rf(constraints)
	}
	if rf, ok := ret.Get(0).(func([]goclient.PolicyConstraintAttributes) *goclient.UpsertPolicyConstraints); ok {
		r0 = rf(constraints)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.UpsertPolicyConstraints)
		}
	}

	if rf, ok := ret.Get(1).(func([]goclient.PolicyConstraintAttributes) error); ok {
		r1 = rf(constraints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpsertConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertConstraints'
type ClientMock_UpsertConstraints_Call struct {
	*mock.Call
}

// UpsertConstraints is a helper method to define mock.On call
//   - constraints []goclient.PolicyConstraintAttributes
func (_e *ClientMock_Expecter) UpsertConstraints(constraints interface{}) *ClientMock_UpsertConstraints_Call {
	return &ClientMock_UpsertConstraints_Call{Call: _e.mock.On("UpsertConstraints", constraints)}
}

func (_c *ClientMock_UpsertConstraints_Call) Run(run func(constraints []goclient.PolicyConstraintAttributes)) *ClientMock_UpsertConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]goclient.PolicyConstraintAttributes))
	})
	return _c
}

func (_c *ClientMock_UpsertConstraints_Call) Return(_a0 *goclient.UpsertPolicyConstraints, _a1 error) *ClientMock_UpsertConstraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpsertConstraints_Call) RunAndReturn(run func([]goclient.PolicyConstraintAttributes) (*goclient.UpsertPolicyConstraints, error)) *ClientMock_UpsertConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertVirtualCluster provides a mock function with given fields: parentID, attributes
func (_m *ClientMock) UpsertVirtualCluster(parentID string, attributes goclient.ClusterAttributes) (*goclient.GetClusterWithToken_Cluster, error) {
	ret := _m.Called(parentID, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpsertVirtualCluster")
	}

	var r0 *goclient.GetClusterWithToken_Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(string, goclient.ClusterAttributes) (*goclient.GetClusterWithToken_Cluster, error)); ok {
		return rf(parentID, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, goclient.ClusterAttributes) *goclient.GetClusterWithToken_Cluster); ok {
		r0 = rf(parentID, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.GetClusterWithToken_Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(string, goclient.ClusterAttributes) error); ok {
		r1 = rf(parentID, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpsertVirtualCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertVirtualCluster'
type ClientMock_UpsertVirtualCluster_Call struct {
	*mock.Call
}

// UpsertVirtualCluster is a helper method to define mock.On call
//   - parentID string
//   - attributes goclient.ClusterAttributes
func (_e *ClientMock_Expecter) UpsertVirtualCluster(parentID interface{}, attributes interface{}) *ClientMock_UpsertVirtualCluster_Call {
	return &ClientMock_UpsertVirtualCluster_Call{Call: _e.mock.On("UpsertVirtualCluster", parentID, attributes)}
}

func (_c *ClientMock_UpsertVirtualCluster_Call) Run(run func(parentID string, attributes goclient.ClusterAttributes)) *ClientMock_UpsertVirtualCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(goclient.ClusterAttributes))
	})
	return _c
}

func (_c *ClientMock_UpsertVirtualCluster_Call) Return(_a0 *goclient.GetClusterWithToken_Cluster, _a1 error) *ClientMock_UpsertVirtualCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpsertVirtualCluster_Call) RunAndReturn(run func(string, goclient.ClusterAttributes) (*goclient.GetClusterWithToken_Cluster, error)) *ClientMock_UpsertVirtualCluster_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertVulnerabilityReports provides a mock function with given fields: vulnerabilities
func (_m *ClientMock) UpsertVulnerabilityReports(vulnerabilities []*goclient.VulnerabilityReportAttributes) (*goclient.UpsertVulnerabilities, error) {
	ret := _m.Called(vulnerabilities)

	if len(ret) == 0 {
		panic("no return value specified for UpsertVulnerabilityReports")
	}

	var r0 *goclient.UpsertVulnerabilities
	var r1 error
	if rf, ok := ret.Get(0).(func([]*goclient.VulnerabilityReportAttributes) (*goclient.UpsertVulnerabilities, error)); ok {
		return rf(vulnerabilities)
	}
	if rf, ok := ret.Get(0).(func([]*goclient.VulnerabilityReportAttributes) *goclient.UpsertVulnerabilities); ok {
		r0 = rf(vulnerabilities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goclient.UpsertVulnerabilities)
		}
	}

	if rf, ok := ret.Get(1).(func([]*goclient.VulnerabilityReportAttributes) error); ok {
		r1 = rf(vulnerabilities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpsertVulnerabilityReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertVulnerabilityReports'
type ClientMock_UpsertVulnerabilityReports_Call struct {
	*mock.Call
}

// UpsertVulnerabilityReports is a helper method to define mock.On call
//   - vulnerabilities []*goclient.VulnerabilityReportAttributes
func (_e *ClientMock_Expecter) UpsertVulnerabilityReports(vulnerabilities interface{}) *ClientMock_UpsertVulnerabilityReports_Call {
	return &ClientMock_UpsertVulnerabilityReports_Call{Call: _e.mock.On("UpsertVulnerabilityReports", vulnerabilities)}
}

func (_c *ClientMock_UpsertVulnerabilityReports_Call) Run(run func(vulnerabilities []*goclient.VulnerabilityReportAttributes)) *ClientMock_UpsertVulnerabilityReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*goclient.VulnerabilityReportAttributes))
	})
	return _c
}

func (_c *ClientMock_UpsertVulnerabilityReports_Call) Return(_a0 *goclient.UpsertVulnerabilities, _a1 error) *ClientMock_UpsertVulnerabilityReports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpsertVulnerabilityReports_Call) RunAndReturn(run func([]*goclient.VulnerabilityReportAttributes) (*goclient.UpsertVulnerabilities, error)) *ClientMock_UpsertVulnerabilityReports_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
