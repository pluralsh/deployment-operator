// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	client "github.com/pluralsh/console/go/client"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/pluralsh/deployment-operator/pkg/harness/stackrun/v1"

	v1alpha1 "github.com/pluralsh/deployment-operator/api/v1alpha1"
)

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// AddServiceErrors provides a mock function with given fields: id, errs
func (_m *ClientMock) AddServiceErrors(id string, errs []*client.ServiceErrorAttributes) error {
	ret := _m.Called(id, errs)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceErrors")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*client.ServiceErrorAttributes) error); ok {
		r0 = rf(id, errs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_AddServiceErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServiceErrors'
type ClientMock_AddServiceErrors_Call struct {
	*mock.Call
}

// AddServiceErrors is a helper method to define mock.On call
//   - id string
//   - errs []*client.ServiceErrorAttributes
func (_e *ClientMock_Expecter) AddServiceErrors(id interface{}, errs interface{}) *ClientMock_AddServiceErrors_Call {
	return &ClientMock_AddServiceErrors_Call{Call: _e.mock.On("AddServiceErrors", id, errs)}
}

func (_c *ClientMock_AddServiceErrors_Call) Run(run func(id string, errs []*client.ServiceErrorAttributes)) *ClientMock_AddServiceErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*client.ServiceErrorAttributes))
	})
	return _c
}

func (_c *ClientMock_AddServiceErrors_Call) Return(_a0 error) *ClientMock_AddServiceErrors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_AddServiceErrors_Call) RunAndReturn(run func(string, []*client.ServiceErrorAttributes) error) *ClientMock_AddServiceErrors_Call {
	_c.Call.Return(run)
	return _c
}

// AddStackRunLogs provides a mock function with given fields: id, logs
func (_m *ClientMock) AddStackRunLogs(id string, logs string) error {
	ret := _m.Called(id, logs)

	if len(ret) == 0 {
		panic("no return value specified for AddStackRunLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_AddStackRunLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStackRunLogs'
type ClientMock_AddStackRunLogs_Call struct {
	*mock.Call
}

// AddStackRunLogs is a helper method to define mock.On call
//   - id string
//   - logs string
func (_e *ClientMock_Expecter) AddStackRunLogs(id interface{}, logs interface{}) *ClientMock_AddStackRunLogs_Call {
	return &ClientMock_AddStackRunLogs_Call{Call: _e.mock.On("AddStackRunLogs", id, logs)}
}

func (_c *ClientMock_AddStackRunLogs_Call) Run(run func(id string, logs string)) *ClientMock_AddStackRunLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_AddStackRunLogs_Call) Return(_a0 error) *ClientMock_AddStackRunLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_AddStackRunLogs_Call) RunAndReturn(run func(string, string) error) *ClientMock_AddStackRunLogs_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteStackRun provides a mock function with given fields: id, attributes
func (_m *ClientMock) CompleteStackRun(id string, attributes client.StackRunAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CompleteStackRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, client.StackRunAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_CompleteStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteStackRun'
type ClientMock_CompleteStackRun_Call struct {
	*mock.Call
}

// CompleteStackRun is a helper method to define mock.On call
//   - id string
//   - attributes client.StackRunAttributes
func (_e *ClientMock_Expecter) CompleteStackRun(id interface{}, attributes interface{}) *ClientMock_CompleteStackRun_Call {
	return &ClientMock_CompleteStackRun_Call{Call: _e.mock.On("CompleteStackRun", id, attributes)}
}

func (_c *ClientMock_CompleteStackRun_Call) Run(run func(id string, attributes client.StackRunAttributes)) *ClientMock_CompleteStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.StackRunAttributes))
	})
	return _c
}

func (_c *ClientMock_CompleteStackRun_Call) Return(_a0 error) *ClientMock_CompleteStackRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_CompleteStackRun_Call) RunAndReturn(run func(string, client.StackRunAttributes) error) *ClientMock_CompleteStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// DetachCluster provides a mock function with given fields: id
func (_m *ClientMock) DetachCluster(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DetachCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DetachCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachCluster'
type ClientMock_DetachCluster_Call struct {
	*mock.Call
}

// DetachCluster is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) DetachCluster(id interface{}) *ClientMock_DetachCluster_Call {
	return &ClientMock_DetachCluster_Call{Call: _e.mock.On("DetachCluster", id)}
}

func (_c *ClientMock_DetachCluster_Call) Run(run func(id string)) *ClientMock_DetachCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_DetachCluster_Call) Return(_a0 error) *ClientMock_DetachCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DetachCluster_Call) RunAndReturn(run func(string) error) *ClientMock_DetachCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GateExists provides a mock function with given fields: id
func (_m *ClientMock) GateExists(id string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GateExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ClientMock_GateExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GateExists'
type ClientMock_GateExists_Call struct {
	*mock.Call
}

// GateExists is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GateExists(id interface{}) *ClientMock_GateExists_Call {
	return &ClientMock_GateExists_Call{Call: _e.mock.On("GateExists", id)}
}

func (_c *ClientMock_GateExists_Call) Run(run func(id string)) *ClientMock_GateExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GateExists_Call) Return(_a0 bool) *ClientMock_GateExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_GateExists_Call) RunAndReturn(run func(string) bool) *ClientMock_GateExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: id
func (_m *ClientMock) GetCluster(id string) (*client.TinyClusterFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *client.TinyClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.TinyClusterFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.TinyClusterFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TinyClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type ClientMock_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetCluster(id interface{}) *ClientMock_GetCluster_Call {
	return &ClientMock_GetCluster_Call{Call: _e.mock.On("GetCluster", id)}
}

func (_c *ClientMock_GetCluster_Call) Run(run func(id string)) *ClientMock_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetCluster_Call) Return(_a0 *client.TinyClusterFragment, _a1 error) *ClientMock_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetCluster_Call) RunAndReturn(run func(string) (*client.TinyClusterFragment, error)) *ClientMock_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackup provides a mock function with given fields: clusterID, namespace, name
func (_m *ClientMock) GetClusterBackup(clusterID string, namespace string, name string) (*client.ClusterBackupFragment, error) {
	ret := _m.Called(clusterID, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackup")
	}

	var r0 *client.ClusterBackupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*client.ClusterBackupFragment, error)); ok {
		return rf(clusterID, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *client.ClusterBackupFragment); ok {
		r0 = rf(clusterID, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterBackupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(clusterID, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackup'
type ClientMock_GetClusterBackup_Call struct {
	*mock.Call
}

// GetClusterBackup is a helper method to define mock.On call
//   - clusterID string
//   - namespace string
//   - name string
func (_e *ClientMock_Expecter) GetClusterBackup(clusterID interface{}, namespace interface{}, name interface{}) *ClientMock_GetClusterBackup_Call {
	return &ClientMock_GetClusterBackup_Call{Call: _e.mock.On("GetClusterBackup", clusterID, namespace, name)}
}

func (_c *ClientMock_GetClusterBackup_Call) Run(run func(clusterID string, namespace string, name string)) *ClientMock_GetClusterBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClientMock_GetClusterBackup_Call) Return(_a0 *client.ClusterBackupFragment, _a1 error) *ClientMock_GetClusterBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterBackup_Call) RunAndReturn(run func(string, string, string) (*client.ClusterBackupFragment, error)) *ClientMock_GetClusterBackup_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterGate provides a mock function with given fields: id
func (_m *ClientMock) GetClusterGate(id string) (*client.PipelineGateFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterGate")
	}

	var r0 *client.PipelineGateFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.PipelineGateFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.PipelineGateFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PipelineGateFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterGate'
type ClientMock_GetClusterGate_Call struct {
	*mock.Call
}

// GetClusterGate is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetClusterGate(id interface{}) *ClientMock_GetClusterGate_Call {
	return &ClientMock_GetClusterGate_Call{Call: _e.mock.On("GetClusterGate", id)}
}

func (_c *ClientMock_GetClusterGate_Call) Run(run func(id string)) *ClientMock_GetClusterGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetClusterGate_Call) Return(_a0 *client.PipelineGateFragment, _a1 error) *ClientMock_GetClusterGate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterGate_Call) RunAndReturn(run func(string) (*client.PipelineGateFragment, error)) *ClientMock_GetClusterGate_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterGates provides a mock function with given fields: after, first
func (_m *ClientMock) GetClusterGates(after *string, first *int64) (*client.PagedClusterGateIDs, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterGates")
	}

	var r0 *client.PagedClusterGateIDs
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*client.PagedClusterGateIDs, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *client.PagedClusterGateIDs); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PagedClusterGateIDs)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterGates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterGates'
type ClientMock_GetClusterGates_Call struct {
	*mock.Call
}

// GetClusterGates is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) GetClusterGates(after interface{}, first interface{}) *ClientMock_GetClusterGates_Call {
	return &ClientMock_GetClusterGates_Call{Call: _e.mock.On("GetClusterGates", after, first)}
}

func (_c *ClientMock_GetClusterGates_Call) Run(run func(after *string, first *int64)) *ClientMock_GetClusterGates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_GetClusterGates_Call) Return(_a0 *client.PagedClusterGateIDs, _a1 error) *ClientMock_GetClusterGates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterGates_Call) RunAndReturn(run func(*string, *int64) (*client.PagedClusterGateIDs, error)) *ClientMock_GetClusterGates_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterRestore provides a mock function with given fields: id
func (_m *ClientMock) GetClusterRestore(id string) (*client.ClusterRestoreFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterRestore")
	}

	var r0 *client.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.ClusterRestoreFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.ClusterRestoreFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterRestore'
type ClientMock_GetClusterRestore_Call struct {
	*mock.Call
}

// GetClusterRestore is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetClusterRestore(id interface{}) *ClientMock_GetClusterRestore_Call {
	return &ClientMock_GetClusterRestore_Call{Call: _e.mock.On("GetClusterRestore", id)}
}

func (_c *ClientMock_GetClusterRestore_Call) Run(run func(id string)) *ClientMock_GetClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetClusterRestore_Call) Return(_a0 *client.ClusterRestoreFragment, _a1 error) *ClientMock_GetClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetClusterRestore_Call) RunAndReturn(run func(string) (*client.ClusterRestoreFragment, error)) *ClientMock_GetClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields:
func (_m *ClientMock) GetCredentials() (string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// ClientMock_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type ClientMock_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
func (_e *ClientMock_Expecter) GetCredentials() *ClientMock_GetCredentials_Call {
	return &ClientMock_GetCredentials_Call{Call: _e.mock.On("GetCredentials")}
}

func (_c *ClientMock_GetCredentials_Call) Run(run func()) *ClientMock_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientMock_GetCredentials_Call) Return(url string, token string) *ClientMock_GetCredentials_Call {
	_c.Call.Return(url, token)
	return _c
}

func (_c *ClientMock_GetCredentials_Call) RunAndReturn(run func() (string, string)) *ClientMock_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: name
func (_m *ClientMock) GetGroup(name string) (*client.GroupFragment, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *client.GroupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.GroupFragment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *client.GroupFragment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type ClientMock_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - name string
func (_e *ClientMock_Expecter) GetGroup(name interface{}) *ClientMock_GetGroup_Call {
	return &ClientMock_GetGroup_Call{Call: _e.mock.On("GetGroup", name)}
}

func (_c *ClientMock_GetGroup_Call) Run(run func(name string)) *ClientMock_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetGroup_Call) Return(_a0 *client.GroupFragment, _a1 error) *ClientMock_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetGroup_Call) RunAndReturn(run func(string) (*client.GroupFragment, error)) *ClientMock_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields: id
func (_m *ClientMock) GetNamespace(id string) (*client.ManagedNamespaceFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *client.ManagedNamespaceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.ManagedNamespaceFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.ManagedNamespaceFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedNamespaceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type ClientMock_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetNamespace(id interface{}) *ClientMock_GetNamespace_Call {
	return &ClientMock_GetNamespace_Call{Call: _e.mock.On("GetNamespace", id)}
}

func (_c *ClientMock_GetNamespace_Call) Run(run func(id string)) *ClientMock_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetNamespace_Call) Return(_a0 *client.ManagedNamespaceFragment, _a1 error) *ClientMock_GetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetNamespace_Call) RunAndReturn(run func(string) (*client.ManagedNamespaceFragment, error)) *ClientMock_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: id
func (_m *ClientMock) GetService(id string) (*client.GetServiceDeploymentForAgent_ServiceDeployment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *client.GetServiceDeploymentForAgent_ServiceDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.GetServiceDeploymentForAgent_ServiceDeployment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.GetServiceDeploymentForAgent_ServiceDeployment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GetServiceDeploymentForAgent_ServiceDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type ClientMock_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetService(id interface{}) *ClientMock_GetService_Call {
	return &ClientMock_GetService_Call{Call: _e.mock.On("GetService", id)}
}

func (_c *ClientMock_GetService_Call) Run(run func(id string)) *ClientMock_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetService_Call) Return(_a0 *client.GetServiceDeploymentForAgent_ServiceDeployment, _a1 error) *ClientMock_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetService_Call) RunAndReturn(run func(string) (*client.GetServiceDeploymentForAgent_ServiceDeployment, error)) *ClientMock_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceDeploymentComponents provides a mock function with given fields: id
func (_m *ClientMock) GetServiceDeploymentComponents(id string) (*client.GetServiceDeploymentComponents_ServiceDeployment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceDeploymentComponents")
	}

	var r0 *client.GetServiceDeploymentComponents_ServiceDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.GetServiceDeploymentComponents_ServiceDeployment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.GetServiceDeploymentComponents_ServiceDeployment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GetServiceDeploymentComponents_ServiceDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetServiceDeploymentComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceDeploymentComponents'
type ClientMock_GetServiceDeploymentComponents_Call struct {
	*mock.Call
}

// GetServiceDeploymentComponents is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetServiceDeploymentComponents(id interface{}) *ClientMock_GetServiceDeploymentComponents_Call {
	return &ClientMock_GetServiceDeploymentComponents_Call{Call: _e.mock.On("GetServiceDeploymentComponents", id)}
}

func (_c *ClientMock_GetServiceDeploymentComponents_Call) Run(run func(id string)) *ClientMock_GetServiceDeploymentComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetServiceDeploymentComponents_Call) Return(_a0 *client.GetServiceDeploymentComponents_ServiceDeployment, _a1 error) *ClientMock_GetServiceDeploymentComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetServiceDeploymentComponents_Call) RunAndReturn(run func(string) (*client.GetServiceDeploymentComponents_ServiceDeployment, error)) *ClientMock_GetServiceDeploymentComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function with given fields: after, first
func (_m *ClientMock) GetServices(after *string, first *int64) (*client.PagedClusterServiceIds, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 *client.PagedClusterServiceIds
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*client.PagedClusterServiceIds, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *client.PagedClusterServiceIds); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PagedClusterServiceIds)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type ClientMock_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) GetServices(after interface{}, first interface{}) *ClientMock_GetServices_Call {
	return &ClientMock_GetServices_Call{Call: _e.mock.On("GetServices", after, first)}
}

func (_c *ClientMock_GetServices_Call) Run(run func(after *string, first *int64)) *ClientMock_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_GetServices_Call) Return(_a0 *client.PagedClusterServiceIds, _a1 error) *ClientMock_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetServices_Call) RunAndReturn(run func(*string, *int64) (*client.PagedClusterServiceIds, error)) *ClientMock_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetStackRun provides a mock function with given fields: id
func (_m *ClientMock) GetStackRun(id string) (*client.StackRunMinimalFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStackRun")
	}

	var r0 *client.StackRunMinimalFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.StackRunMinimalFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.StackRunMinimalFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StackRunMinimalFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStackRun'
type ClientMock_GetStackRun_Call struct {
	*mock.Call
}

// GetStackRun is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetStackRun(id interface{}) *ClientMock_GetStackRun_Call {
	return &ClientMock_GetStackRun_Call{Call: _e.mock.On("GetStackRun", id)}
}

func (_c *ClientMock_GetStackRun_Call) Run(run func(id string)) *ClientMock_GetStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetStackRun_Call) Return(_a0 *client.StackRunMinimalFragment, _a1 error) *ClientMock_GetStackRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetStackRun_Call) RunAndReturn(run func(string) (*client.StackRunMinimalFragment, error)) *ClientMock_GetStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetStackRunBase provides a mock function with given fields: id
func (_m *ClientMock) GetStackRunBase(id string) (*v1.StackRun, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStackRunBase")
	}

	var r0 *v1.StackRun
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1.StackRun, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *v1.StackRun); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.StackRun)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetStackRunBase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStackRunBase'
type ClientMock_GetStackRunBase_Call struct {
	*mock.Call
}

// GetStackRunBase is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) GetStackRunBase(id interface{}) *ClientMock_GetStackRunBase_Call {
	return &ClientMock_GetStackRunBase_Call{Call: _e.mock.On("GetStackRunBase", id)}
}

func (_c *ClientMock_GetStackRunBase_Call) Run(run func(id string)) *ClientMock_GetStackRunBase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetStackRunBase_Call) Return(_a0 *v1.StackRun, _a1 error) *ClientMock_GetStackRunBase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetStackRunBase_Call) RunAndReturn(run func(string) (*v1.StackRun, error)) *ClientMock_GetStackRunBase_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: email
func (_m *ClientMock) GetUser(email string) (*client.UserFragment, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *client.UserFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.UserFragment, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *client.UserFragment); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type ClientMock_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - email string
func (_e *ClientMock_Expecter) GetUser(email interface{}) *ClientMock_GetUser_Call {
	return &ClientMock_GetUser_Call{Call: _e.mock.On("GetUser", email)}
}

func (_c *ClientMock_GetUser_Call) Run(run func(email string)) *ClientMock_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_GetUser_Call) Return(_a0 *client.UserFragment, _a1 error) *ClientMock_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetUser_Call) RunAndReturn(run func(string) (*client.UserFragment, error)) *ClientMock_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterExists provides a mock function with given fields: id
func (_m *ClientMock) IsClusterExists(id string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_IsClusterExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterExists'
type ClientMock_IsClusterExists_Call struct {
	*mock.Call
}

// IsClusterExists is a helper method to define mock.On call
//   - id string
func (_e *ClientMock_Expecter) IsClusterExists(id interface{}) *ClientMock_IsClusterExists_Call {
	return &ClientMock_IsClusterExists_Call{Call: _e.mock.On("IsClusterExists", id)}
}

func (_c *ClientMock_IsClusterExists_Call) Run(run func(id string)) *ClientMock_IsClusterExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_IsClusterExists_Call) Return(_a0 bool, _a1 error) *ClientMock_IsClusterExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_IsClusterExists_Call) RunAndReturn(run func(string) (bool, error)) *ClientMock_IsClusterExists_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterStackRuns provides a mock function with given fields: after, first
func (_m *ClientMock) ListClusterStackRuns(after *string, first *int64) (*client.ListClusterStackIds_ClusterStackRuns, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterStackRuns")
	}

	var r0 *client.ListClusterStackIds_ClusterStackRuns
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*client.ListClusterStackIds_ClusterStackRuns, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *client.ListClusterStackIds_ClusterStackRuns); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ListClusterStackIds_ClusterStackRuns)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ListClusterStackRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterStackRuns'
type ClientMock_ListClusterStackRuns_Call struct {
	*mock.Call
}

// ListClusterStackRuns is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) ListClusterStackRuns(after interface{}, first interface{}) *ClientMock_ListClusterStackRuns_Call {
	return &ClientMock_ListClusterStackRuns_Call{Call: _e.mock.On("ListClusterStackRuns", after, first)}
}

func (_c *ClientMock_ListClusterStackRuns_Call) Run(run func(after *string, first *int64)) *ClientMock_ListClusterStackRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_ListClusterStackRuns_Call) Return(_a0 *client.ListClusterStackIds_ClusterStackRuns, _a1 error) *ClientMock_ListClusterStackRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ListClusterStackRuns_Call) RunAndReturn(run func(*string, *int64) (*client.ListClusterStackIds_ClusterStackRuns, error)) *ClientMock_ListClusterStackRuns_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields: after, first
func (_m *ClientMock) ListNamespaces(after *string, first *int64) (*client.ListClusterNamespaces_ClusterManagedNamespaces, error) {
	ret := _m.Called(after, first)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *client.ListClusterNamespaces_ClusterManagedNamespaces
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int64) (*client.ListClusterNamespaces_ClusterManagedNamespaces, error)); ok {
		return rf(after, first)
	}
	if rf, ok := ret.Get(0).(func(*string, *int64) *client.ListClusterNamespaces_ClusterManagedNamespaces); ok {
		r0 = rf(after, first)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ListClusterNamespaces_ClusterManagedNamespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int64) error); ok {
		r1 = rf(after, first)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type ClientMock_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - after *string
//   - first *int64
func (_e *ClientMock_Expecter) ListNamespaces(after interface{}, first interface{}) *ClientMock_ListNamespaces_Call {
	return &ClientMock_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces", after, first)}
}

func (_c *ClientMock_ListNamespaces_Call) Run(run func(after *string, first *int64)) *ClientMock_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*int64))
	})
	return _c
}

func (_c *ClientMock_ListNamespaces_Call) Return(_a0 *client.ListClusterNamespaces_ClusterManagedNamespaces, _a1 error) *ClientMock_ListNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ListNamespaces_Call) RunAndReturn(run func(*string, *int64) (*client.ListClusterNamespaces_ClusterManagedNamespaces, error)) *ClientMock_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// MyCluster provides a mock function with given fields:
func (_m *ClientMock) MyCluster() (*client.MyCluster, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MyCluster")
	}

	var r0 *client.MyCluster
	var r1 error
	if rf, ok := ret.Get(0).(func() (*client.MyCluster, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *client.MyCluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MyCluster)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_MyCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MyCluster'
type ClientMock_MyCluster_Call struct {
	*mock.Call
}

// MyCluster is a helper method to define mock.On call
func (_e *ClientMock_Expecter) MyCluster() *ClientMock_MyCluster_Call {
	return &ClientMock_MyCluster_Call{Call: _e.mock.On("MyCluster")}
}

func (_c *ClientMock_MyCluster_Call) Run(run func()) *ClientMock_MyCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientMock_MyCluster_Call) Return(_a0 *client.MyCluster, _a1 error) *ClientMock_MyCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_MyCluster_Call) RunAndReturn(run func() (*client.MyCluster, error)) *ClientMock_MyCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ParsePipelineGateCR provides a mock function with given fields: pgFragment, operatorNamespace
func (_m *ClientMock) ParsePipelineGateCR(pgFragment *client.PipelineGateFragment, operatorNamespace string) (*v1alpha1.PipelineGate, error) {
	ret := _m.Called(pgFragment, operatorNamespace)

	if len(ret) == 0 {
		panic("no return value specified for ParsePipelineGateCR")
	}

	var r0 *v1alpha1.PipelineGate
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.PipelineGateFragment, string) (*v1alpha1.PipelineGate, error)); ok {
		return rf(pgFragment, operatorNamespace)
	}
	if rf, ok := ret.Get(0).(func(*client.PipelineGateFragment, string) *v1alpha1.PipelineGate); ok {
		r0 = rf(pgFragment, operatorNamespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PipelineGate)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.PipelineGateFragment, string) error); ok {
		r1 = rf(pgFragment, operatorNamespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_ParsePipelineGateCR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParsePipelineGateCR'
type ClientMock_ParsePipelineGateCR_Call struct {
	*mock.Call
}

// ParsePipelineGateCR is a helper method to define mock.On call
//   - pgFragment *client.PipelineGateFragment
//   - operatorNamespace string
func (_e *ClientMock_Expecter) ParsePipelineGateCR(pgFragment interface{}, operatorNamespace interface{}) *ClientMock_ParsePipelineGateCR_Call {
	return &ClientMock_ParsePipelineGateCR_Call{Call: _e.mock.On("ParsePipelineGateCR", pgFragment, operatorNamespace)}
}

func (_c *ClientMock_ParsePipelineGateCR_Call) Run(run func(pgFragment *client.PipelineGateFragment, operatorNamespace string)) *ClientMock_ParsePipelineGateCR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.PipelineGateFragment), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_ParsePipelineGateCR_Call) Return(_a0 *v1alpha1.PipelineGate, _a1 error) *ClientMock_ParsePipelineGateCR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_ParsePipelineGateCR_Call) RunAndReturn(run func(*client.PipelineGateFragment, string) (*v1alpha1.PipelineGate, error)) *ClientMock_ParsePipelineGateCR_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: vsn
func (_m *ClientMock) Ping(vsn string) error {
	ret := _m.Called(vsn)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(vsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type ClientMock_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - vsn string
func (_e *ClientMock_Expecter) Ping(vsn interface{}) *ClientMock_Ping_Call {
	return &ClientMock_Ping_Call{Call: _e.mock.On("Ping", vsn)}
}

func (_c *ClientMock_Ping_Call) Run(run func(vsn string)) *ClientMock_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_Ping_Call) Return(_a0 error) *ClientMock_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_Ping_Call) RunAndReturn(run func(string) error) *ClientMock_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PingCluster provides a mock function with given fields: attributes
func (_m *ClientMock) PingCluster(attributes client.ClusterPing) error {
	ret := _m.Called(attributes)

	if len(ret) == 0 {
		panic("no return value specified for PingCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(client.ClusterPing) error); ok {
		r0 = rf(attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_PingCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingCluster'
type ClientMock_PingCluster_Call struct {
	*mock.Call
}

// PingCluster is a helper method to define mock.On call
//   - attributes client.ClusterPing
func (_e *ClientMock_Expecter) PingCluster(attributes interface{}) *ClientMock_PingCluster_Call {
	return &ClientMock_PingCluster_Call{Call: _e.mock.On("PingCluster", attributes)}
}

func (_c *ClientMock_PingCluster_Call) Run(run func(attributes client.ClusterPing)) *ClientMock_PingCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.ClusterPing))
	})
	return _c
}

func (_c *ClientMock_PingCluster_Call) Return(_a0 error) *ClientMock_PingCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_PingCluster_Call) RunAndReturn(run func(client.ClusterPing) error) *ClientMock_PingCluster_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRuntimeServices provides a mock function with given fields: svcs, serviceId
func (_m *ClientMock) RegisterRuntimeServices(svcs map[string]string, serviceId *string) error {
	ret := _m.Called(svcs, serviceId)

	if len(ret) == 0 {
		panic("no return value specified for RegisterRuntimeServices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string, *string) error); ok {
		r0 = rf(svcs, serviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_RegisterRuntimeServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRuntimeServices'
type ClientMock_RegisterRuntimeServices_Call struct {
	*mock.Call
}

// RegisterRuntimeServices is a helper method to define mock.On call
//   - svcs map[string]string
//   - serviceId *string
func (_e *ClientMock_Expecter) RegisterRuntimeServices(svcs interface{}, serviceId interface{}) *ClientMock_RegisterRuntimeServices_Call {
	return &ClientMock_RegisterRuntimeServices_Call{Call: _e.mock.On("RegisterRuntimeServices", svcs, serviceId)}
}

func (_c *ClientMock_RegisterRuntimeServices_Call) Run(run func(svcs map[string]string, serviceId *string)) *ClientMock_RegisterRuntimeServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string), args[1].(*string))
	})
	return _c
}

func (_c *ClientMock_RegisterRuntimeServices_Call) Return(_a0 error) *ClientMock_RegisterRuntimeServices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_RegisterRuntimeServices_Call) RunAndReturn(run func(map[string]string, *string) error) *ClientMock_RegisterRuntimeServices_Call {
	_c.Call.Return(run)
	return _c
}

// SaveClusterBackup provides a mock function with given fields: attrs
func (_m *ClientMock) SaveClusterBackup(attrs client.BackupAttributes) (*client.ClusterBackupFragment, error) {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for SaveClusterBackup")
	}

	var r0 *client.ClusterBackupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(client.BackupAttributes) (*client.ClusterBackupFragment, error)); ok {
		return rf(attrs)
	}
	if rf, ok := ret.Get(0).(func(client.BackupAttributes) *client.ClusterBackupFragment); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterBackupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(client.BackupAttributes) error); ok {
		r1 = rf(attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_SaveClusterBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveClusterBackup'
type ClientMock_SaveClusterBackup_Call struct {
	*mock.Call
}

// SaveClusterBackup is a helper method to define mock.On call
//   - attrs client.BackupAttributes
func (_e *ClientMock_Expecter) SaveClusterBackup(attrs interface{}) *ClientMock_SaveClusterBackup_Call {
	return &ClientMock_SaveClusterBackup_Call{Call: _e.mock.On("SaveClusterBackup", attrs)}
}

func (_c *ClientMock_SaveClusterBackup_Call) Run(run func(attrs client.BackupAttributes)) *ClientMock_SaveClusterBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.BackupAttributes))
	})
	return _c
}

func (_c *ClientMock_SaveClusterBackup_Call) Return(_a0 *client.ClusterBackupFragment, _a1 error) *ClientMock_SaveClusterBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_SaveClusterBackup_Call) RunAndReturn(run func(client.BackupAttributes) (*client.ClusterBackupFragment, error)) *ClientMock_SaveClusterBackup_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUpgradeInsights provides a mock function with given fields: attributes
func (_m *ClientMock) SaveUpgradeInsights(attributes []*client.UpgradeInsightAttributes) (*client.SaveUpgradeInsights, error) {
	ret := _m.Called(attributes)

	if len(ret) == 0 {
		panic("no return value specified for SaveUpgradeInsights")
	}

	var r0 *client.SaveUpgradeInsights
	var r1 error
	if rf, ok := ret.Get(0).(func([]*client.UpgradeInsightAttributes) (*client.SaveUpgradeInsights, error)); ok {
		return rf(attributes)
	}
	if rf, ok := ret.Get(0).(func([]*client.UpgradeInsightAttributes) *client.SaveUpgradeInsights); ok {
		r0 = rf(attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SaveUpgradeInsights)
		}
	}

	if rf, ok := ret.Get(1).(func([]*client.UpgradeInsightAttributes) error); ok {
		r1 = rf(attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_SaveUpgradeInsights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUpgradeInsights'
type ClientMock_SaveUpgradeInsights_Call struct {
	*mock.Call
}

// SaveUpgradeInsights is a helper method to define mock.On call
//   - attributes []*client.UpgradeInsightAttributes
func (_e *ClientMock_Expecter) SaveUpgradeInsights(attributes interface{}) *ClientMock_SaveUpgradeInsights_Call {
	return &ClientMock_SaveUpgradeInsights_Call{Call: _e.mock.On("SaveUpgradeInsights", attributes)}
}

func (_c *ClientMock_SaveUpgradeInsights_Call) Run(run func(attributes []*client.UpgradeInsightAttributes)) *ClientMock_SaveUpgradeInsights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*client.UpgradeInsightAttributes))
	})
	return _c
}

func (_c *ClientMock_SaveUpgradeInsights_Call) Return(_a0 *client.SaveUpgradeInsights, _a1 error) *ClientMock_SaveUpgradeInsights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_SaveUpgradeInsights_Call) RunAndReturn(run func([]*client.UpgradeInsightAttributes) (*client.SaveUpgradeInsights, error)) *ClientMock_SaveUpgradeInsights_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterRestore provides a mock function with given fields: id, attrs
func (_m *ClientMock) UpdateClusterRestore(id string, attrs client.RestoreAttributes) (*client.ClusterRestoreFragment, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterRestore")
	}

	var r0 *client.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, client.RestoreAttributes) (*client.ClusterRestoreFragment, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, client.RestoreAttributes) *client.ClusterRestoreFragment); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, client.RestoreAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpdateClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterRestore'
type ClientMock_UpdateClusterRestore_Call struct {
	*mock.Call
}

// UpdateClusterRestore is a helper method to define mock.On call
//   - id string
//   - attrs client.RestoreAttributes
func (_e *ClientMock_Expecter) UpdateClusterRestore(id interface{}, attrs interface{}) *ClientMock_UpdateClusterRestore_Call {
	return &ClientMock_UpdateClusterRestore_Call{Call: _e.mock.On("UpdateClusterRestore", id, attrs)}
}

func (_c *ClientMock_UpdateClusterRestore_Call) Run(run func(id string, attrs client.RestoreAttributes)) *ClientMock_UpdateClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.RestoreAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateClusterRestore_Call) Return(_a0 *client.ClusterRestoreFragment, _a1 error) *ClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpdateClusterRestore_Call) RunAndReturn(run func(string, client.RestoreAttributes) (*client.ClusterRestoreFragment, error)) *ClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponents provides a mock function with given fields: id, revisionID, sha, components, errs
func (_m *ClientMock) UpdateComponents(id string, revisionID string, sha *string, components []*client.ComponentAttributes, errs []*client.ServiceErrorAttributes) error {
	ret := _m.Called(id, revisionID, sha, components, errs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *string, []*client.ComponentAttributes, []*client.ServiceErrorAttributes) error); ok {
		r0 = rf(id, revisionID, sha, components, errs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponents'
type ClientMock_UpdateComponents_Call struct {
	*mock.Call
}

// UpdateComponents is a helper method to define mock.On call
//   - id string
//   - revisionID string
//   - sha *string
//   - components []*client.ComponentAttributes
//   - errs []*client.ServiceErrorAttributes
func (_e *ClientMock_Expecter) UpdateComponents(id interface{}, revisionID interface{}, sha interface{}, components interface{}, errs interface{}) *ClientMock_UpdateComponents_Call {
	return &ClientMock_UpdateComponents_Call{Call: _e.mock.On("UpdateComponents", id, revisionID, sha, components, errs)}
}

func (_c *ClientMock_UpdateComponents_Call) Run(run func(id string, revisionID string, sha *string, components []*client.ComponentAttributes, errs []*client.ServiceErrorAttributes)) *ClientMock_UpdateComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*string), args[3].([]*client.ComponentAttributes), args[4].([]*client.ServiceErrorAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateComponents_Call) Return(_a0 error) *ClientMock_UpdateComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateComponents_Call) RunAndReturn(run func(string, string, *string, []*client.ComponentAttributes, []*client.ServiceErrorAttributes) error) *ClientMock_UpdateComponents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGate provides a mock function with given fields: id, attributes
func (_m *ClientMock) UpdateGate(id string, attributes client.GateUpdateAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, client.GateUpdateAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGate'
type ClientMock_UpdateGate_Call struct {
	*mock.Call
}

// UpdateGate is a helper method to define mock.On call
//   - id string
//   - attributes client.GateUpdateAttributes
func (_e *ClientMock_Expecter) UpdateGate(id interface{}, attributes interface{}) *ClientMock_UpdateGate_Call {
	return &ClientMock_UpdateGate_Call{Call: _e.mock.On("UpdateGate", id, attributes)}
}

func (_c *ClientMock_UpdateGate_Call) Run(run func(id string, attributes client.GateUpdateAttributes)) *ClientMock_UpdateGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.GateUpdateAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateGate_Call) Return(_a0 error) *ClientMock_UpdateGate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateGate_Call) RunAndReturn(run func(string, client.GateUpdateAttributes) error) *ClientMock_UpdateGate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStackRun provides a mock function with given fields: id, attributes
func (_m *ClientMock) UpdateStackRun(id string, attributes client.StackRunAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStackRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, client.StackRunAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackRun'
type ClientMock_UpdateStackRun_Call struct {
	*mock.Call
}

// UpdateStackRun is a helper method to define mock.On call
//   - id string
//   - attributes client.StackRunAttributes
func (_e *ClientMock_Expecter) UpdateStackRun(id interface{}, attributes interface{}) *ClientMock_UpdateStackRun_Call {
	return &ClientMock_UpdateStackRun_Call{Call: _e.mock.On("UpdateStackRun", id, attributes)}
}

func (_c *ClientMock_UpdateStackRun_Call) Run(run func(id string, attributes client.StackRunAttributes)) *ClientMock_UpdateStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.StackRunAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateStackRun_Call) Return(_a0 error) *ClientMock_UpdateStackRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateStackRun_Call) RunAndReturn(run func(string, client.StackRunAttributes) error) *ClientMock_UpdateStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStackRunStep provides a mock function with given fields: id, attributes
func (_m *ClientMock) UpdateStackRunStep(id string, attributes client.RunStepAttributes) error {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStackRunStep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, client.RunStepAttributes) error); ok {
		r0 = rf(id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpdateStackRunStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackRunStep'
type ClientMock_UpdateStackRunStep_Call struct {
	*mock.Call
}

// UpdateStackRunStep is a helper method to define mock.On call
//   - id string
//   - attributes client.RunStepAttributes
func (_e *ClientMock_Expecter) UpdateStackRunStep(id interface{}, attributes interface{}) *ClientMock_UpdateStackRunStep_Call {
	return &ClientMock_UpdateStackRunStep_Call{Call: _e.mock.On("UpdateStackRunStep", id, attributes)}
}

func (_c *ClientMock_UpdateStackRunStep_Call) Run(run func(id string, attributes client.RunStepAttributes)) *ClientMock_UpdateStackRunStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.RunStepAttributes))
	})
	return _c
}

func (_c *ClientMock_UpdateStackRunStep_Call) Return(_a0 error) *ClientMock_UpdateStackRunStep_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpdateStackRunStep_Call) RunAndReturn(run func(string, client.RunStepAttributes) error) *ClientMock_UpdateStackRunStep_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertConstraints provides a mock function with given fields: constraints
func (_m *ClientMock) UpsertConstraints(constraints []*client.PolicyConstraintAttributes) (*client.UpsertPolicyConstraints, error) {
	ret := _m.Called(constraints)

	if len(ret) == 0 {
		panic("no return value specified for UpsertConstraints")
	}

	var r0 *client.UpsertPolicyConstraints
	var r1 error
	if rf, ok := ret.Get(0).(func([]*client.PolicyConstraintAttributes) (*client.UpsertPolicyConstraints, error)); ok {
		return rf(constraints)
	}
	if rf, ok := ret.Get(0).(func([]*client.PolicyConstraintAttributes) *client.UpsertPolicyConstraints); ok {
		r0 = rf(constraints)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UpsertPolicyConstraints)
		}
	}

	if rf, ok := ret.Get(1).(func([]*client.PolicyConstraintAttributes) error); ok {
		r1 = rf(constraints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpsertConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertConstraints'
type ClientMock_UpsertConstraints_Call struct {
	*mock.Call
}

// UpsertConstraints is a helper method to define mock.On call
//   - constraints []*client.PolicyConstraintAttributes
func (_e *ClientMock_Expecter) UpsertConstraints(constraints interface{}) *ClientMock_UpsertConstraints_Call {
	return &ClientMock_UpsertConstraints_Call{Call: _e.mock.On("UpsertConstraints", constraints)}
}

func (_c *ClientMock_UpsertConstraints_Call) Run(run func(constraints []*client.PolicyConstraintAttributes)) *ClientMock_UpsertConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*client.PolicyConstraintAttributes))
	})
	return _c
}

func (_c *ClientMock_UpsertConstraints_Call) Return(_a0 *client.UpsertPolicyConstraints, _a1 error) *ClientMock_UpsertConstraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpsertConstraints_Call) RunAndReturn(run func([]*client.PolicyConstraintAttributes) (*client.UpsertPolicyConstraints, error)) *ClientMock_UpsertConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertVirtualCluster provides a mock function with given fields: parentID, attributes
func (_m *ClientMock) UpsertVirtualCluster(parentID string, attributes client.ClusterAttributes) (*client.GetClusterWithToken_Cluster, error) {
	ret := _m.Called(parentID, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpsertVirtualCluster")
	}

	var r0 *client.GetClusterWithToken_Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(string, client.ClusterAttributes) (*client.GetClusterWithToken_Cluster, error)); ok {
		return rf(parentID, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, client.ClusterAttributes) *client.GetClusterWithToken_Cluster); ok {
		r0 = rf(parentID, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GetClusterWithToken_Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(string, client.ClusterAttributes) error); ok {
		r1 = rf(parentID, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_UpsertVirtualCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertVirtualCluster'
type ClientMock_UpsertVirtualCluster_Call struct {
	*mock.Call
}

// UpsertVirtualCluster is a helper method to define mock.On call
//   - parentID string
//   - attributes client.ClusterAttributes
func (_e *ClientMock_Expecter) UpsertVirtualCluster(parentID interface{}, attributes interface{}) *ClientMock_UpsertVirtualCluster_Call {
	return &ClientMock_UpsertVirtualCluster_Call{Call: _e.mock.On("UpsertVirtualCluster", parentID, attributes)}
}

func (_c *ClientMock_UpsertVirtualCluster_Call) Run(run func(parentID string, attributes client.ClusterAttributes)) *ClientMock_UpsertVirtualCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.ClusterAttributes))
	})
	return _c
}

func (_c *ClientMock_UpsertVirtualCluster_Call) Return(_a0 *client.GetClusterWithToken_Cluster, _a1 error) *ClientMock_UpsertVirtualCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_UpsertVirtualCluster_Call) RunAndReturn(run func(string, client.ClusterAttributes) (*client.GetClusterWithToken_Cluster, error)) *ClientMock_UpsertVirtualCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
