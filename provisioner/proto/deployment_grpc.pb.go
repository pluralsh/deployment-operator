// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/deployment.proto

package deployment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityClient is the client API for Identity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityClient interface {
	// This call is meant to retrieve the unique provisioner Identity.
	// This identity will have to be set in DeploymentClaim.ProviderName field in order to invoke this specific provisioner.
	ProviderGetInfo(ctx context.Context, in *ProviderGetInfoRequest, opts ...grpc.CallOption) (*ProviderGetInfoResponse, error)
}

type identityClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityClient(cc grpc.ClientConnInterface) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) ProviderGetInfo(ctx context.Context, in *ProviderGetInfoRequest, opts ...grpc.CallOption) (*ProviderGetInfoResponse, error) {
	out := new(ProviderGetInfoResponse)
	err := c.cc.Invoke(ctx, "/deployment.v1alpha1.Identity/ProviderGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServer is the server API for Identity service.
// All implementations should embed UnimplementedIdentityServer
// for forward compatibility
type IdentityServer interface {
	// This call is meant to retrieve the unique provisioner Identity.
	// This identity will have to be set in DeploymentClaim.ProviderName field in order to invoke this specific provisioner.
	ProviderGetInfo(context.Context, *ProviderGetInfoRequest) (*ProviderGetInfoResponse, error)
}

// UnimplementedIdentityServer should be embedded to have forward compatible implementations.
type UnimplementedIdentityServer struct {
}

func (UnimplementedIdentityServer) ProviderGetInfo(context.Context, *ProviderGetInfoRequest) (*ProviderGetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderGetInfo not implemented")
}

// UnsafeIdentityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServer will
// result in compilation errors.
type UnsafeIdentityServer interface {
	mustEmbedUnimplementedIdentityServer()
}

func RegisterIdentityServer(s grpc.ServiceRegistrar, srv IdentityServer) {
	s.RegisterService(&Identity_ServiceDesc, srv)
}

func _Identity_ProviderGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderGetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).ProviderGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.v1alpha1.Identity/ProviderGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).ProviderGetInfo(ctx, req.(*ProviderGetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Identity_ServiceDesc is the grpc.ServiceDesc for Identity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Identity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deployment.v1alpha1.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProviderGetInfo",
			Handler:    _Identity_ProviderGetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deployment.proto",
}

// ProvisionerClient is the client API for Provisioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionerClient interface {
	// This call is made to create the deployment in the backend.
	// This call is idempotent
	//    1. If a deployment that matches both name and parameters already exists, then OK (success) must be returned.
	//    2. If a deployment by same name, but different parameters is provided, then the appropriate error code ALREADY_EXISTS must be returned.
	ProviderCreateDeployment(ctx context.Context, in *ProviderCreateDeploymentRequest, opts ...grpc.CallOption) (*ProviderCreateDeploymentResponse, error)
	// This call is made to delete the deployment in the backend.
	// If the deployment has already been deleted, then no error should be returned.
	ProviderDeleteDeployment(ctx context.Context, in *ProviderDeleteDeploymentRequest, opts ...grpc.CallOption) (*ProviderDeleteDeploymentResponse, error)
	ProviderGetDeploymentStatus(ctx context.Context, in *ProviderGetDeploymentStatusRequest, opts ...grpc.CallOption) (*ProviderGetDeploymentStatusResponse, error)
}

type provisionerClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionerClient(cc grpc.ClientConnInterface) ProvisionerClient {
	return &provisionerClient{cc}
}

func (c *provisionerClient) ProviderCreateDeployment(ctx context.Context, in *ProviderCreateDeploymentRequest, opts ...grpc.CallOption) (*ProviderCreateDeploymentResponse, error) {
	out := new(ProviderCreateDeploymentResponse)
	err := c.cc.Invoke(ctx, "/deployment.v1alpha1.Provisioner/ProviderCreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) ProviderDeleteDeployment(ctx context.Context, in *ProviderDeleteDeploymentRequest, opts ...grpc.CallOption) (*ProviderDeleteDeploymentResponse, error) {
	out := new(ProviderDeleteDeploymentResponse)
	err := c.cc.Invoke(ctx, "/deployment.v1alpha1.Provisioner/ProviderDeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) ProviderGetDeploymentStatus(ctx context.Context, in *ProviderGetDeploymentStatusRequest, opts ...grpc.CallOption) (*ProviderGetDeploymentStatusResponse, error) {
	out := new(ProviderGetDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, "/deployment.v1alpha1.Provisioner/ProviderGetDeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionerServer is the server API for Provisioner service.
// All implementations should embed UnimplementedProvisionerServer
// for forward compatibility
type ProvisionerServer interface {
	// This call is made to create the deployment in the backend.
	// This call is idempotent
	//    1. If a deployment that matches both name and parameters already exists, then OK (success) must be returned.
	//    2. If a deployment by same name, but different parameters is provided, then the appropriate error code ALREADY_EXISTS must be returned.
	ProviderCreateDeployment(context.Context, *ProviderCreateDeploymentRequest) (*ProviderCreateDeploymentResponse, error)
	// This call is made to delete the deployment in the backend.
	// If the deployment has already been deleted, then no error should be returned.
	ProviderDeleteDeployment(context.Context, *ProviderDeleteDeploymentRequest) (*ProviderDeleteDeploymentResponse, error)
	ProviderGetDeploymentStatus(context.Context, *ProviderGetDeploymentStatusRequest) (*ProviderGetDeploymentStatusResponse, error)
}

// UnimplementedProvisionerServer should be embedded to have forward compatible implementations.
type UnimplementedProvisionerServer struct {
}

func (UnimplementedProvisionerServer) ProviderCreateDeployment(context.Context, *ProviderCreateDeploymentRequest) (*ProviderCreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderCreateDeployment not implemented")
}
func (UnimplementedProvisionerServer) ProviderDeleteDeployment(context.Context, *ProviderDeleteDeploymentRequest) (*ProviderDeleteDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderDeleteDeployment not implemented")
}
func (UnimplementedProvisionerServer) ProviderGetDeploymentStatus(context.Context, *ProviderGetDeploymentStatusRequest) (*ProviderGetDeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderGetDeploymentStatus not implemented")
}

// UnsafeProvisionerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionerServer will
// result in compilation errors.
type UnsafeProvisionerServer interface {
	mustEmbedUnimplementedProvisionerServer()
}

func RegisterProvisionerServer(s grpc.ServiceRegistrar, srv ProvisionerServer) {
	s.RegisterService(&Provisioner_ServiceDesc, srv)
}

func _Provisioner_ProviderCreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderCreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).ProviderCreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.v1alpha1.Provisioner/ProviderCreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).ProviderCreateDeployment(ctx, req.(*ProviderCreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_ProviderDeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderDeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).ProviderDeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.v1alpha1.Provisioner/ProviderDeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).ProviderDeleteDeployment(ctx, req.(*ProviderDeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_ProviderGetDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderGetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).ProviderGetDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.v1alpha1.Provisioner/ProviderGetDeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).ProviderGetDeploymentStatus(ctx, req.(*ProviderGetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Provisioner_ServiceDesc is the grpc.ServiceDesc for Provisioner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provisioner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deployment.v1alpha1.Provisioner",
	HandlerType: (*ProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProviderCreateDeployment",
			Handler:    _Provisioner_ProviderCreateDeployment_Handler,
		},
		{
			MethodName: "ProviderDeleteDeployment",
			Handler:    _Provisioner_ProviderDeleteDeployment_Handler,
		},
		{
			MethodName: "ProviderGetDeploymentStatus",
			Handler:    _Provisioner_ProviderGetDeploymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deployment.proto",
}
