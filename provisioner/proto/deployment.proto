syntax = "proto3";
package deployment.v1alpha1;

import "google/protobuf/descriptor.proto";

option go_package = "pluralsh/deployment-operator/provisioner;deployment";

extend google.protobuf.EnumOptions {
    // Indicates that this enum is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_enum = 1116;
}

extend google.protobuf.EnumValueOptions {
    // Indicates that this enum value is OPTIONAL and part of an
    // experimental API that may be deprecated and eventually removed
    // between minor releases.
    bool alpha_enum_value = 1116;
}

extend google.protobuf.FieldOptions {
    // Indicates that a field MAY contain information that is sensitive
    // and MUST be treated as such (e.g. not logged).
    bool deployment_secret = 1115;

    // Indicates that this field is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_field = 1116;
}

extend google.protobuf.MessageOptions {
    // Indicates that this message is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_message = 1116;
}

extend google.protobuf.MethodOptions {
    // Indicates that this method is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_method = 1116;
}

extend google.protobuf.ServiceOptions {
    // Indicates that this service is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_service = 1116;
}

service Identity {
    // This call is meant to retrieve the unique provisioner Identity.
    // This identity will have to be set in DeploymentClaim.ProviderName field in order to invoke this specific provisioner.
    rpc ProviderGetInfo (ProviderGetInfoRequest) returns (ProviderGetInfoResponse) {}
}

service Provisioner {
    // This call is made to create the deployment in the backend.
    // This call is idempotent
    //    1. If a deployment that matches both name and parameters already exists, then OK (success) must be returned.
    //    2. If a deployment by same name, but different parameters is provided, then the appropriate error code ALREADY_EXISTS must be returned.
    rpc ProviderCreateDeployment (ProviderCreateDeploymentRequest) returns (ProviderCreateDeploymentResponse) {}
    // This call is made to delete the deployment in the backend.
    // If the deployment has already been deleted, then no error should be returned.
    rpc ProviderDeleteDeployment (ProviderDeleteDeploymentRequest) returns (ProviderDeleteDeploymentResponse) {}

    rpc ProviderGetDeploymentStatus (ProviderGetDeploymentStatusRequest) returns (ProviderGetDeploymentStatusResponse) {}
}

// S3SignatureVersion is the version of the signing algorithm for all s3 requests
enum S3SignatureVersion {
    UnknownSignature = 0;
    // S3V2, Signature version v2
    S3V2 = 1;
    // S3V4, Signature version v4
    S3V4 = 2;
}

enum AnonymousDeploymentAccessMode {
    UnknownDeploymentAccessMode = 0;
    // Default, disallow uncredentialed access to the backend storage.
    Private = 1;
    // Read only, uncredentialed users can call ListDeployment and GetObject.
    ReadOnly = 2;
    // Write only, uncredentialed users can only call PutObject.
    WriteOnly = 3;
    // Read/Write, uncredentialed users can read objects as well as PutObject.
    ReadWrite = 4;
}

enum AuthenticationType {
    UnknownAuthenticationType = 0;
    // Default, KEY based authentication.
    Key = 1;
    // Storageaccount based authentication.
    IAM = 2;
}

message DeploymentStatusEnum {
    oneof type {
        bool ready = 1;
        bool pending = 2;
        bool error = 3;
    }
}

message CredentialDetails {
    // map of the details in the secrets for the protocol string
    map<string, string> secrets = 1;
}

message ProviderGetInfoRequest {
    // Intentionally left blank
}

message ProviderGetInfoResponse {
    // This field is REQUIRED
    // The name MUST follow domain name notation format
    // (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
    // include the plugin's host company name and the plugin name,
    // to minimize the possibility of collisions. It MUST be 63
    // characters or less, beginning and ending with an alphanumeric
    // character ([a-z0-9A-Z]) with dashes (-), dots (.), and
    // alphanumerics between.
    string name = 1;
}

message GitRef {
    string ref = 1;
    string folder = 2;
}

message Revision {
    string version = 1;
    GitRef git = 2;
}

message ProviderCreateDeploymentRequest {
    // This field is REQUIRED
    // name specifies the name of the deployment that should be created.
    string name = 1;
    string namespace = 2;
    GitRef git = 3;
    Revision revision = 4;
    // This field is OPTIONAL
    // The caller should treat the values in parameters as opaque. 
    // The receiver is responsible for parsing and validating the values.
    map<string,string> parameters = 5;
}

message ProviderCreateDeploymentResponse {
    // deployment_id returned here is expected to be the globally unique 
    // identifier for the deployment in the object storage provider.
    string deployment_id = 1;
}

message ProviderDeleteDeploymentRequest {
    // This field is REQUIRED
    // deployment_id is a globally unique identifier for the deployment
    // in the object storage provider 
    string deployment_id = 1;
}

message ProviderGetDeploymentStatusRequest {
    // This field is REQUIRED
    // deployment_id is a globally unique identifier for the deployment
    // in the object storage provider
    string deployment_id = 1;
}

message ProviderGetDeploymentStatusResponse {
    // deployment_id returned here is expected to be the globally unique
    // identifier for the deployment in the object storage provider.
    string deployment_id = 1;

    DeploymentStatusEnum deployment_status = 2;
    string message = 3;
}

message ProviderDeleteDeploymentResponse {
    // Intentionally left blank
}
